-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pic_detec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_TVALID : IN STD_LOGIC;
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TLAST : IN STD_LOGIC;
    weight_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_in_TVALID : IN STD_LOGIC;
    weight_in_TREADY : OUT STD_LOGIC;
    weight_in_TLAST : IN STD_LOGIC;
    control_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    control_in_TVALID : IN STD_LOGIC;
    control_in_TREADY : OUT STD_LOGIC;
    control_in_TLAST : IN STD_LOGIC;
    data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    data_out_TLAST : OUT STD_LOGIC );
end;


architecture behav of pic_detec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pic_detec,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.845000,HLS_SYN_LAT=35322981,HLS_SYN_TPT=none,HLS_SYN_MEM=171,HLS_SYN_DSP=35,HLS_SYN_FF=16011,HLS_SYN_LUT=23011,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal fc2_b_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal fc2_b_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal fc1_m_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc1_m_ce0 : STD_LOGIC;
    signal fc1_m_we0 : STD_LOGIC;
    signal fc1_m_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc1_b_ce0 : STD_LOGIC;
    signal fc1_b_we0 : STD_LOGIC;
    signal fc1_b_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2_m_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_m_ce0 : STD_LOGIC;
    signal fc2_m_we0 : STD_LOGIC;
    signal fc2_m_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal image_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal image_r_ce0 : STD_LOGIC;
    signal image_r_we0 : STD_LOGIC;
    signal image_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_r_ce1 : STD_LOGIC;
    signal image_r_we1 : STD_LOGIC;
    signal image_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ce0 : STD_LOGIC;
    signal p_we0 : STD_LOGIC;
    signal p_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln63_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal control_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i1_0_reg_282 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc2_b_0_load_reg_523 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2_b_1_load_reg_528 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_6_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln63_fu_430_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_reg_541 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln61_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal icmp_ln76_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal pre_out_V_full_n : STD_LOGIC;
    signal pre_out_V_write : STD_LOGIC;
    signal icmp_ln76_reg_554_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln76_reg_554_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_573 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_markov_fu_315_ap_ready : STD_LOGIC;
    signal grp_markov_fu_315_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_BDCT_fu_293_ap_start : STD_LOGIC;
    signal grp_BDCT_fu_293_ap_done : STD_LOGIC;
    signal grp_BDCT_fu_293_ap_idle : STD_LOGIC;
    signal grp_BDCT_fu_293_ap_ready : STD_LOGIC;
    signal grp_BDCT_fu_293_image_in_out_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_BDCT_fu_293_image_in_out_ce0 : STD_LOGIC;
    signal grp_BDCT_fu_293_image_in_out_we0 : STD_LOGIC;
    signal grp_BDCT_fu_293_image_in_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_markov_fu_315_ap_start : STD_LOGIC;
    signal grp_markov_fu_315_ap_idle : STD_LOGIC;
    signal grp_markov_fu_315_img_BDCT_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_markov_fu_315_img_BDCT_ce0 : STD_LOGIC;
    signal grp_markov_fu_315_img_BDCT_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_markov_fu_315_img_BDCT_ce1 : STD_LOGIC;
    signal grp_markov_fu_315_img_BDCT_we1 : STD_LOGIC;
    signal grp_markov_fu_315_img_BDCT_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_markov_fu_315_p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_markov_fu_315_p_ce0 : STD_LOGIC;
    signal grp_markov_fu_315_p_we0 : STD_LOGIC;
    signal grp_markov_fu_315_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_relu6_fu_335_ap_start : STD_LOGIC;
    signal grp_fc_relu6_fu_335_ap_done : STD_LOGIC;
    signal grp_fc_relu6_fu_335_ap_idle : STD_LOGIC;
    signal grp_fc_relu6_fu_335_ap_ready : STD_LOGIC;
    signal grp_fc_relu6_fu_335_in_stream_V_read : STD_LOGIC;
    signal grp_fc_relu6_fu_335_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc_relu6_fu_335_out_stream_V_write : STD_LOGIC;
    signal grp_fc_relu6_fu_335_fc1_b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fc_relu6_fu_335_fc1_b_ce0 : STD_LOGIC;
    signal grp_fc_relu6_fu_335_fc1_m_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fc_relu6_fu_335_fc1_m_ce0 : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_ap_start : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_ap_done : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_ap_idle : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_ap_ready : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_in_stream_V_read : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_out_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fc_64u_2u_1u_s_fu_349_out_stream_V_write : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_fc2_m_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fc_64u_2u_1u_s_fu_349_fc2_m_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_ap_start : STD_LOGIC;
    signal grp_weight_loader_fu_365_ap_done : STD_LOGIC;
    signal grp_weight_loader_fu_365_ap_idle : STD_LOGIC;
    signal grp_weight_loader_fu_365_ap_ready : STD_LOGIC;
    signal grp_weight_loader_fu_365_weight_in_TREADY : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc1_m_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_weight_loader_fu_365_fc1_m_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc1_m_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc1_m_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_365_fc1_b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_weight_loader_fu_365_fc1_b_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc1_b_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc1_b_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_365_fc2_m_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_weight_loader_fu_365_fc2_m_ce0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc2_m_we0 : STD_LOGIC;
    signal grp_weight_loader_fu_365_fc2_m_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_365_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_weight_loader_fu_365_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_datastream_out_2u_s_fu_379_ap_start : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_ap_done : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_ap_idle : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_ap_ready : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_output_V_read : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_data_out_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_datastream_out_2u_s_fu_379_data_out_TVALID : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_data_out_TREADY : STD_LOGIC;
    signal grp_datastream_out_2u_s_fu_379_data_out_TLAST : STD_LOGIC;
    signal i_0_reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln47_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_BDCT_fu_293_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_markov_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fc_relu6_fu_335_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal pre_out_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pre_out_V_empty_n : STD_LOGIC;
    signal pre_out_V_read : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal fc2final_V_full_n : STD_LOGIC;
    signal fc2final_V_write : STD_LOGIC;
    signal grp_fc_64u_2u_1u_s_fu_349_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal fc2final_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2final_V_empty_n : STD_LOGIC;
    signal fc2final_V_read : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data1_out_V_full_n : STD_LOGIC;
    signal data1_out_V_write : STD_LOGIC;
    signal grp_weight_loader_fu_365_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_datastream_out_2u_s_fu_379_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal data1_out_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data1_out_V_empty_n : STD_LOGIC;
    signal data1_out_V_read : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln67_1_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_8_fu_422_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln67_fu_451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_fu_455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_388_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal regslice_both_data_out_V_data_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_data_in_V_data_U_apdone_blk : STD_LOGIC;
    signal data_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_TVALID_int : STD_LOGIC;
    signal data_in_TREADY_int : STD_LOGIC;
    signal regslice_both_data_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_data_in_V_last_U_apdone_blk : STD_LOGIC;
    signal data_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_data_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_data_in_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_weight_in_V_data_U_apdone_blk : STD_LOGIC;
    signal weight_in_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_in_TVALID_int : STD_LOGIC;
    signal weight_in_TREADY_int : STD_LOGIC;
    signal regslice_both_weight_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_weight_in_V_last_U_apdone_blk : STD_LOGIC;
    signal weight_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_weight_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_weight_in_V_last_U_ack_in : STD_LOGIC;
    signal regslice_both_control_in_V_data_U_apdone_blk : STD_LOGIC;
    signal control_in_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal control_in_TVALID_int : STD_LOGIC;
    signal control_in_TREADY_int : STD_LOGIC;
    signal regslice_both_control_in_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_control_in_V_last_U_apdone_blk : STD_LOGIC;
    signal control_in_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_control_in_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_control_in_V_last_U_ack_in : STD_LOGIC;
    signal data_out_TREADY_int : STD_LOGIC;
    signal regslice_both_data_out_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_data_out_V_last_U_apdone_blk : STD_LOGIC;
    signal regslice_both_w1_data_out_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_data_out_V_last_U_vld_out : STD_LOGIC;

    component BDCT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_in_out_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        image_in_out_ce0 : OUT STD_LOGIC;
        image_in_out_we0 : OUT STD_LOGIC;
        image_in_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component markov IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_BDCT_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        img_BDCT_ce0 : OUT STD_LOGIC;
        img_BDCT_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_BDCT_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        img_BDCT_ce1 : OUT STD_LOGIC;
        img_BDCT_we1 : OUT STD_LOGIC;
        img_BDCT_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_BDCT_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_relu6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        fc1_b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc1_b_ce0 : OUT STD_LOGIC;
        fc1_b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fc1_m_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        fc1_m_ce0 : OUT STD_LOGIC;
        fc1_m_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fc_64u_2u_1u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_stream_V_empty_n : IN STD_LOGIC;
        in_stream_V_read : OUT STD_LOGIC;
        out_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_stream_V_full_n : IN STD_LOGIC;
        out_stream_V_write : OUT STD_LOGIC;
        bias_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        fc2_m_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fc2_m_ce0 : OUT STD_LOGIC;
        fc2_m_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component weight_loader IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weight_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_in_TVALID : IN STD_LOGIC;
        weight_in_TREADY : OUT STD_LOGIC;
        weight_in_TLAST : IN STD_LOGIC;
        fc1_m_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        fc1_m_ce0 : OUT STD_LOGIC;
        fc1_m_we0 : OUT STD_LOGIC;
        fc1_m_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fc1_b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc1_b_ce0 : OUT STD_LOGIC;
        fc1_b_we0 : OUT STD_LOGIC;
        fc1_b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fc2_m_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fc2_m_ce0 : OUT STD_LOGIC;
        fc2_m_we0 : OUT STD_LOGIC;
        fc2_m_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component datastream_out_2u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_empty_n : IN STD_LOGIC;
        output_V_read : OUT STD_LOGIC;
        data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_out_TVALID : OUT STD_LOGIC;
        data_out_TREADY : IN STD_LOGIC;
        data_out_TLAST : OUT STD_LOGIC );
    end component;


    component pic_detec_sptohp_Hfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pic_detec_fc1_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fc_relu6_y IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pic_detec_fc2_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pic_detec_image_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pic_detec_p IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w16_d196_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fc1_m_U : component pic_detec_fc1_m
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc1_m_address0,
        ce0 => fc1_m_ce0,
        we0 => fc1_m_we0,
        d0 => grp_weight_loader_fu_365_fc1_m_d0,
        q0 => fc1_m_q0);

    fc1_b_U : component fc_relu6_y
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc1_b_address0,
        ce0 => fc1_b_ce0,
        we0 => fc1_b_we0,
        d0 => grp_weight_loader_fu_365_fc1_b_d0,
        q0 => fc1_b_q0);

    fc2_m_U : component pic_detec_fc2_m
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc2_m_address0,
        ce0 => fc2_m_ce0,
        we0 => fc2_m_we0,
        d0 => grp_weight_loader_fu_365_fc2_m_d0,
        q0 => fc2_m_q0);

    image_r_U : component pic_detec_image_r
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_r_address0,
        ce0 => image_r_ce0,
        we0 => image_r_we0,
        d0 => image_r_d0,
        q0 => image_r_q0,
        address1 => grp_markov_fu_315_img_BDCT_address1,
        ce1 => image_r_ce1,
        we1 => image_r_we1,
        d1 => grp_markov_fu_315_img_BDCT_d1,
        q1 => image_r_q1);

    p_U : component pic_detec_p
    generic map (
        DataWidth => 32,
        AddressRange => 196,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => p_address0,
        ce0 => p_ce0,
        we0 => p_we0,
        d0 => grp_markov_fu_315_p_d0,
        q0 => p_q0);

    grp_BDCT_fu_293 : component BDCT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_BDCT_fu_293_ap_start,
        ap_done => grp_BDCT_fu_293_ap_done,
        ap_idle => grp_BDCT_fu_293_ap_idle,
        ap_ready => grp_BDCT_fu_293_ap_ready,
        image_in_out_address0 => grp_BDCT_fu_293_image_in_out_address0,
        image_in_out_ce0 => grp_BDCT_fu_293_image_in_out_ce0,
        image_in_out_we0 => grp_BDCT_fu_293_image_in_out_we0,
        image_in_out_d0 => grp_BDCT_fu_293_image_in_out_d0,
        image_in_out_q0 => image_r_q0);

    grp_markov_fu_315 : component markov
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_markov_fu_315_ap_start,
        ap_done => grp_markov_fu_315_ap_done,
        ap_idle => grp_markov_fu_315_ap_idle,
        ap_ready => grp_markov_fu_315_ap_ready,
        img_BDCT_address0 => grp_markov_fu_315_img_BDCT_address0,
        img_BDCT_ce0 => grp_markov_fu_315_img_BDCT_ce0,
        img_BDCT_q0 => image_r_q0,
        img_BDCT_address1 => grp_markov_fu_315_img_BDCT_address1,
        img_BDCT_ce1 => grp_markov_fu_315_img_BDCT_ce1,
        img_BDCT_we1 => grp_markov_fu_315_img_BDCT_we1,
        img_BDCT_d1 => grp_markov_fu_315_img_BDCT_d1,
        img_BDCT_q1 => image_r_q1,
        p_address0 => grp_markov_fu_315_p_address0,
        p_ce0 => grp_markov_fu_315_p_ce0,
        p_we0 => grp_markov_fu_315_p_we0,
        p_d0 => grp_markov_fu_315_p_d0);

    grp_fc_relu6_fu_335 : component fc_relu6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_relu6_fu_335_ap_start,
        ap_done => grp_fc_relu6_fu_335_ap_done,
        ap_idle => grp_fc_relu6_fu_335_ap_idle,
        ap_ready => grp_fc_relu6_fu_335_ap_ready,
        in_stream_V_dout => pre_out_V_dout,
        in_stream_V_empty_n => pre_out_V_empty_n,
        in_stream_V_read => grp_fc_relu6_fu_335_in_stream_V_read,
        out_stream_V_din => grp_fc_relu6_fu_335_out_stream_V_din,
        out_stream_V_full_n => fc2final_V_full_n,
        out_stream_V_write => grp_fc_relu6_fu_335_out_stream_V_write,
        fc1_b_address0 => grp_fc_relu6_fu_335_fc1_b_address0,
        fc1_b_ce0 => grp_fc_relu6_fu_335_fc1_b_ce0,
        fc1_b_q0 => fc1_b_q0,
        fc1_m_address0 => grp_fc_relu6_fu_335_fc1_m_address0,
        fc1_m_ce0 => grp_fc_relu6_fu_335_fc1_m_ce0,
        fc1_m_q0 => fc1_m_q0);

    grp_fc_64u_2u_1u_s_fu_349 : component fc_64u_2u_1u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_64u_2u_1u_s_fu_349_ap_start,
        ap_done => grp_fc_64u_2u_1u_s_fu_349_ap_done,
        ap_idle => grp_fc_64u_2u_1u_s_fu_349_ap_idle,
        ap_ready => grp_fc_64u_2u_1u_s_fu_349_ap_ready,
        in_stream_V_dout => fc2final_V_dout,
        in_stream_V_empty_n => fc2final_V_empty_n,
        in_stream_V_read => grp_fc_64u_2u_1u_s_fu_349_in_stream_V_read,
        out_stream_V_din => grp_fc_64u_2u_1u_s_fu_349_out_stream_V_din,
        out_stream_V_full_n => data1_out_V_full_n,
        out_stream_V_write => grp_fc_64u_2u_1u_s_fu_349_out_stream_V_write,
        bias_0_read => fc2_b_0_load_reg_523,
        bias_1_read => fc2_b_1_load_reg_528,
        fc2_m_address0 => grp_fc_64u_2u_1u_s_fu_349_fc2_m_address0,
        fc2_m_ce0 => grp_fc_64u_2u_1u_s_fu_349_fc2_m_ce0,
        fc2_m_q0 => fc2_m_q0);

    grp_weight_loader_fu_365 : component weight_loader
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_weight_loader_fu_365_ap_start,
        ap_done => grp_weight_loader_fu_365_ap_done,
        ap_idle => grp_weight_loader_fu_365_ap_idle,
        ap_ready => grp_weight_loader_fu_365_ap_ready,
        weight_in_TDATA => weight_in_TDATA_int,
        weight_in_TVALID => weight_in_TVALID_int,
        weight_in_TREADY => grp_weight_loader_fu_365_weight_in_TREADY,
        weight_in_TLAST => weight_in_TLAST_int,
        fc1_m_address0 => grp_weight_loader_fu_365_fc1_m_address0,
        fc1_m_ce0 => grp_weight_loader_fu_365_fc1_m_ce0,
        fc1_m_we0 => grp_weight_loader_fu_365_fc1_m_we0,
        fc1_m_d0 => grp_weight_loader_fu_365_fc1_m_d0,
        fc1_b_address0 => grp_weight_loader_fu_365_fc1_b_address0,
        fc1_b_ce0 => grp_weight_loader_fu_365_fc1_b_ce0,
        fc1_b_we0 => grp_weight_loader_fu_365_fc1_b_we0,
        fc1_b_d0 => grp_weight_loader_fu_365_fc1_b_d0,
        fc2_m_address0 => grp_weight_loader_fu_365_fc2_m_address0,
        fc2_m_ce0 => grp_weight_loader_fu_365_fc2_m_ce0,
        fc2_m_we0 => grp_weight_loader_fu_365_fc2_m_we0,
        fc2_m_d0 => grp_weight_loader_fu_365_fc2_m_d0,
        ap_return_0 => grp_weight_loader_fu_365_ap_return_0,
        ap_return_1 => grp_weight_loader_fu_365_ap_return_1);

    grp_datastream_out_2u_s_fu_379 : component datastream_out_2u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_datastream_out_2u_s_fu_379_ap_start,
        ap_done => grp_datastream_out_2u_s_fu_379_ap_done,
        ap_idle => grp_datastream_out_2u_s_fu_379_ap_idle,
        ap_ready => grp_datastream_out_2u_s_fu_379_ap_ready,
        output_V_dout => data1_out_V_dout,
        output_V_empty_n => data1_out_V_empty_n,
        output_V_read => grp_datastream_out_2u_s_fu_379_output_V_read,
        data_out_TDATA => grp_datastream_out_2u_s_fu_379_data_out_TDATA,
        data_out_TVALID => grp_datastream_out_2u_s_fu_379_data_out_TVALID,
        data_out_TREADY => grp_datastream_out_2u_s_fu_379_data_out_TREADY,
        data_out_TLAST => grp_datastream_out_2u_s_fu_379_data_out_TLAST);

    pic_detec_sptohp_Hfu_U102 : component pic_detec_sptohp_Hfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_q0,
        ce => grp_fu_388_ce,
        dout => grp_fu_388_p1);

    pre_out_V_fifo_U : component fifo_w16_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_1_reg_573,
        if_full_n => pre_out_V_full_n,
        if_write => pre_out_V_write,
        if_dout => pre_out_V_dout,
        if_empty_n => pre_out_V_empty_n,
        if_read => pre_out_V_read);

    fc2final_V_fifo_U : component fifo_w16_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_relu6_fu_335_out_stream_V_din,
        if_full_n => fc2final_V_full_n,
        if_write => fc2final_V_write,
        if_dout => fc2final_V_dout,
        if_empty_n => fc2final_V_empty_n,
        if_read => fc2final_V_read);

    data1_out_V_fifo_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_fc_64u_2u_1u_s_fu_349_out_stream_V_din,
        if_full_n => data1_out_V_full_n,
        if_write => data1_out_V_write,
        if_dout => data1_out_V_dout,
        if_empty_n => data1_out_V_empty_n,
        if_read => data1_out_V_read);

    regslice_both_data_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TDATA,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_data_in_V_data_U_ack_in,
        data_out => data_in_TDATA_int,
        vld_out => data_in_TVALID_int,
        ack_out => data_in_TREADY_int,
        apdone_blk => regslice_both_data_in_V_data_U_apdone_blk);

    regslice_both_w1_data_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TLAST,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_w1_data_in_V_last_U_ack_in,
        data_out => data_in_TLAST_int,
        vld_out => regslice_both_w1_data_in_V_last_U_vld_out,
        ack_out => data_in_TREADY_int,
        apdone_blk => regslice_both_w1_data_in_V_last_U_apdone_blk);

    regslice_both_weight_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TDATA,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_weight_in_V_data_U_ack_in,
        data_out => weight_in_TDATA_int,
        vld_out => weight_in_TVALID_int,
        ack_out => weight_in_TREADY_int,
        apdone_blk => regslice_both_weight_in_V_data_U_apdone_blk);

    regslice_both_w1_weight_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TLAST,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_w1_weight_in_V_last_U_ack_in,
        data_out => weight_in_TLAST_int,
        vld_out => regslice_both_w1_weight_in_V_last_U_vld_out,
        ack_out => weight_in_TREADY_int,
        apdone_blk => regslice_both_w1_weight_in_V_last_U_apdone_blk);

    regslice_both_control_in_V_data_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => control_in_TDATA,
        vld_in => control_in_TVALID,
        ack_in => regslice_both_control_in_V_data_U_ack_in,
        data_out => control_in_TDATA_int,
        vld_out => control_in_TVALID_int,
        ack_out => control_in_TREADY_int,
        apdone_blk => regslice_both_control_in_V_data_U_apdone_blk);

    regslice_both_w1_control_in_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => control_in_TLAST,
        vld_in => control_in_TVALID,
        ack_in => regslice_both_w1_control_in_V_last_U_ack_in,
        data_out => control_in_TLAST_int,
        vld_out => regslice_both_w1_control_in_V_last_U_vld_out,
        ack_out => control_in_TREADY_int,
        apdone_blk => regslice_both_w1_control_in_V_last_U_apdone_blk);

    regslice_both_data_out_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_datastream_out_2u_s_fu_379_data_out_TDATA,
        vld_in => grp_datastream_out_2u_s_fu_379_data_out_TVALID,
        ack_in => data_out_TREADY_int,
        data_out => data_out_TDATA,
        vld_out => regslice_both_data_out_V_data_U_vld_out,
        ack_out => data_out_TREADY,
        apdone_blk => regslice_both_data_out_V_data_U_apdone_blk);

    regslice_both_w1_data_out_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_datastream_out_2u_s_fu_379_data_out_TLAST,
        vld_in => grp_datastream_out_2u_s_fu_379_data_out_TVALID,
        ack_in => regslice_both_w1_data_out_V_last_U_ack_in_dummy,
        data_out => data_out_TLAST,
        vld_out => regslice_both_w1_data_out_V_last_U_vld_out,
        ack_out => data_out_TREADY,
        apdone_blk => regslice_both_w1_data_out_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_markov_fu_315_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_markov_fu_315_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_BDCT_fu_293_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_BDCT_fu_293_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln61_fu_410_p2 = ap_const_lv1_1))) then 
                    grp_BDCT_fu_293_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_BDCT_fu_293_ap_ready = ap_const_logic_1)) then 
                    grp_BDCT_fu_293_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_datastream_out_2u_s_fu_379_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_datastream_out_2u_s_fu_379_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_datastream_out_2u_s_fu_379_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_datastream_out_2u_s_fu_379_ap_ready = ap_const_logic_1)) then 
                    grp_datastream_out_2u_s_fu_379_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_64u_2u_1u_s_fu_349_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_64u_2u_1u_s_fu_349_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_fc_64u_2u_1u_s_fu_349_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_64u_2u_1u_s_fu_349_ap_ready = ap_const_logic_1)) then 
                    grp_fc_64u_2u_1u_s_fu_349_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_relu6_fu_335_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_relu6_fu_335_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_fc_relu6_fu_335_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_relu6_fu_335_ap_ready = ap_const_logic_1)) then 
                    grp_fc_relu6_fu_335_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_markov_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_markov_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_markov_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_markov_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_markov_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_weight_loader_fu_365_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_weight_loader_fu_365_ap_start_reg <= ap_const_logic_0;
            else
                if (((control_in_TVALID_int = ap_const_logic_1) and (icmp_ln47_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_weight_loader_fu_365_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_weight_loader_fu_365_ap_ready = ap_const_logic_1)) then 
                    grp_weight_loader_fu_365_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_fu_465_p2 = ap_const_lv1_0))) then 
                i1_0_reg_282 <= i_fu_471_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_markov_fu_315_ap_done = ap_const_logic_1))) then 
                i1_0_reg_282 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln47_fu_396_p2 = ap_const_lv1_0))) then 
                i_0_reg_260 <= ap_const_lv8_0;
            elsif ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_1))) then 
                i_0_reg_260 <= i_6_reg_536;
            end if; 
        end if;
    end process;

    j_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln61_fu_410_p2 = ap_const_lv1_0))) then 
                j_0_reg_271 <= ap_const_lv8_0;
            elsif ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) then 
                j_0_reg_271 <= j_fu_440_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_weight_loader_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                fc2_b_0 <= grp_weight_loader_fu_365_ap_return_0;
                fc2_b_1 <= grp_weight_loader_fu_365_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                fc2_b_0_load_reg_523 <= fc2_b_0;
                fc2_b_1_load_reg_528 <= fc2_b_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_536 <= i_6_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln76_reg_554 <= icmp_ln76_fu_465_p2;
                icmp_ln76_reg_554_pp0_iter1_reg <= icmp_ln76_reg_554;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln76_reg_554_pp0_iter2_reg <= icmp_ln76_reg_554_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_reg_554_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_1_reg_573 <= grp_fu_388_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln61_fu_410_p2 = ap_const_lv1_0))) then
                    zext_ln63_reg_541(14 downto 7) <= zext_ln63_fu_430_p1(14 downto 7);
            end if;
        end if;
    end process;
    zext_ln63_reg_541(6 downto 0) <= "0000000";
    zext_ln63_reg_541(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, icmp_ln63_fu_434_p2, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln61_fu_410_p2, icmp_ln76_fu_465_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, grp_markov_fu_315_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, grp_BDCT_fu_293_ap_done, grp_fc_relu6_fu_335_ap_done, grp_fc_64u_2u_1u_s_fu_349_ap_done, grp_weight_loader_fu_365_ap_done, grp_datastream_out_2u_s_fu_379_ap_done, icmp_ln47_fu_396_p2, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, regslice_both_data_out_V_data_U_apdone_blk, data_in_TVALID_int, control_in_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln47_fu_396_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((control_in_TVALID_int = ap_const_logic_1) and (icmp_ln47_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln61_fu_410_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_BDCT_fu_293_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_markov_fu_315_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_465_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_465_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_fc_relu6_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_fc_64u_2u_1u_s_fu_349_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_datastream_out_2u_s_fu_379_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((grp_weight_loader_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((regslice_both_data_out_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln67_fu_455_p2 <= std_logic_vector(unsigned(zext_ln63_reg_541) + unsigned(zext_ln67_fu_451_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(pre_out_V_full_n, icmp_ln76_reg_554_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= ((pre_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln76_reg_554_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(pre_out_V_full_n, icmp_ln76_reg_554_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((pre_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln76_reg_554_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(pre_out_V_full_n, icmp_ln76_reg_554_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((pre_out_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln76_reg_554_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state10_pp0_stage0_iter3_assign_proc : process(pre_out_V_full_n, icmp_ln76_reg_554_pp0_iter2_reg)
    begin
                ap_block_state10_pp0_stage0_iter3 <= ((pre_out_V_full_n = ap_const_logic_0) and (icmp_ln76_reg_554_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_block_state3_assign_proc : process(icmp_ln63_fu_434_p2, data_in_TVALID_int)
    begin
                ap_block_state3 <= ((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln76_fu_465_p2)
    begin
        if ((icmp_ln76_fu_465_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    control_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, control_in_TVALID_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            control_in_TDATA_blk_n <= control_in_TVALID_int;
        else 
            control_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    control_in_TREADY_assign_proc : process(control_in_TVALID, regslice_both_control_in_V_data_U_ack_in)
    begin
        if (((regslice_both_control_in_V_data_U_ack_in = ap_const_logic_1) and (control_in_TVALID = ap_const_logic_1))) then 
            control_in_TREADY <= ap_const_logic_1;
        else 
            control_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    control_in_TREADY_int_assign_proc : process(ap_CS_fsm_state1, control_in_TVALID_int)
    begin
        if (((control_in_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            control_in_TREADY_int <= ap_const_logic_1;
        else 
            control_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data1_out_V_read_assign_proc : process(grp_datastream_out_2u_s_fu_379_output_V_read, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data1_out_V_read <= grp_datastream_out_2u_s_fu_379_output_V_read;
        else 
            data1_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data1_out_V_write_assign_proc : process(grp_fc_64u_2u_1u_s_fu_349_out_stream_V_write, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            data1_out_V_write <= grp_fc_64u_2u_1u_s_fu_349_out_stream_V_write;
        else 
            data1_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln63_fu_434_p2, data_in_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID_int;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(data_in_TVALID, regslice_both_data_in_V_data_U_ack_in)
    begin
        if (((regslice_both_data_in_V_data_U_ack_in = ap_const_logic_1) and (data_in_TVALID = ap_const_logic_1))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TREADY_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln63_fu_434_p2, data_in_TVALID_int)
    begin
        if ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) then 
            data_in_TREADY_int <= ap_const_logic_1;
        else 
            data_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    data_out_TVALID <= regslice_both_data_out_V_data_U_vld_out;

    fc1_b_address0_assign_proc : process(grp_fc_relu6_fu_335_fc1_b_address0, grp_weight_loader_fu_365_fc1_b_address0, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc1_b_address0 <= grp_weight_loader_fu_365_fc1_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_b_address0 <= grp_fc_relu6_fu_335_fc1_b_address0;
        else 
            fc1_b_address0 <= "XXXXXX";
        end if; 
    end process;


    fc1_b_ce0_assign_proc : process(grp_fc_relu6_fu_335_fc1_b_ce0, grp_weight_loader_fu_365_fc1_b_ce0, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc1_b_ce0 <= grp_weight_loader_fu_365_fc1_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_b_ce0 <= grp_fc_relu6_fu_335_fc1_b_ce0;
        else 
            fc1_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_b_we0_assign_proc : process(grp_weight_loader_fu_365_fc1_b_we0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc1_b_we0 <= grp_weight_loader_fu_365_fc1_b_we0;
        else 
            fc1_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_m_address0_assign_proc : process(grp_fc_relu6_fu_335_fc1_m_address0, grp_weight_loader_fu_365_fc1_m_address0, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc1_m_address0 <= grp_weight_loader_fu_365_fc1_m_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_m_address0 <= grp_fc_relu6_fu_335_fc1_m_address0;
        else 
            fc1_m_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fc1_m_ce0_assign_proc : process(grp_fc_relu6_fu_335_fc1_m_ce0, grp_weight_loader_fu_365_fc1_m_ce0, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc1_m_ce0 <= grp_weight_loader_fu_365_fc1_m_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc1_m_ce0 <= grp_fc_relu6_fu_335_fc1_m_ce0;
        else 
            fc1_m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_m_we0_assign_proc : process(grp_weight_loader_fu_365_fc1_m_we0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc1_m_we0 <= grp_weight_loader_fu_365_fc1_m_we0;
        else 
            fc1_m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc2_m_address0_assign_proc : process(grp_fc_64u_2u_1u_s_fu_349_fc2_m_address0, grp_weight_loader_fu_365_fc2_m_address0, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc2_m_address0 <= grp_weight_loader_fu_365_fc2_m_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fc2_m_address0 <= grp_fc_64u_2u_1u_s_fu_349_fc2_m_address0;
        else 
            fc2_m_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc2_m_ce0_assign_proc : process(grp_fc_64u_2u_1u_s_fu_349_fc2_m_ce0, grp_weight_loader_fu_365_fc2_m_ce0, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc2_m_ce0 <= grp_weight_loader_fu_365_fc2_m_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fc2_m_ce0 <= grp_fc_64u_2u_1u_s_fu_349_fc2_m_ce0;
        else 
            fc2_m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc2_m_we0_assign_proc : process(grp_weight_loader_fu_365_fc2_m_we0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fc2_m_we0 <= grp_weight_loader_fu_365_fc2_m_we0;
        else 
            fc2_m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc2final_V_read_assign_proc : process(grp_fc_64u_2u_1u_s_fu_349_in_stream_V_read, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fc2final_V_read <= grp_fc_64u_2u_1u_s_fu_349_in_stream_V_read;
        else 
            fc2final_V_read <= ap_const_logic_0;
        end if; 
    end process;


    fc2final_V_write_assign_proc : process(grp_fc_relu6_fu_335_out_stream_V_write, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fc2final_V_write <= grp_fc_relu6_fu_335_out_stream_V_write;
        else 
            fc2final_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_BDCT_fu_293_ap_start <= grp_BDCT_fu_293_ap_start_reg;
    grp_datastream_out_2u_s_fu_379_ap_start <= grp_datastream_out_2u_s_fu_379_ap_start_reg;
    grp_datastream_out_2u_s_fu_379_data_out_TREADY <= (data_out_TREADY_int and ap_CS_fsm_state16);
    grp_fc_64u_2u_1u_s_fu_349_ap_start <= grp_fc_64u_2u_1u_s_fu_349_ap_start_reg;
    grp_fc_relu6_fu_335_ap_start <= grp_fc_relu6_fu_335_ap_start_reg;

    grp_fu_388_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_388_ce <= ap_const_logic_1;
        else 
            grp_fu_388_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_markov_fu_315_ap_start <= grp_markov_fu_315_ap_start_reg;
    grp_weight_loader_fu_365_ap_start <= grp_weight_loader_fu_365_ap_start_reg;
    i_6_fu_416_p2 <= std_logic_vector(unsigned(i_0_reg_260) + unsigned(ap_const_lv8_1));
    i_fu_471_p2 <= std_logic_vector(unsigned(i1_0_reg_282) + unsigned(ap_const_lv8_1));
    icmp_ln47_fu_396_p2 <= "1" when (control_in_TDATA_int = ap_const_lv16_0) else "0";
    icmp_ln61_fu_410_p2 <= "1" when (i_0_reg_260 = ap_const_lv8_80) else "0";
    icmp_ln63_fu_434_p2 <= "1" when (j_0_reg_271 = ap_const_lv8_80) else "0";
    icmp_ln76_fu_465_p2 <= "1" when (i1_0_reg_282 = ap_const_lv8_C4) else "0";

    image_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, grp_BDCT_fu_293_image_in_out_address0, grp_markov_fu_315_img_BDCT_address0, ap_CS_fsm_state4, zext_ln67_1_fu_460_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_r_address0 <= zext_ln67_1_fu_460_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_r_address0 <= grp_markov_fu_315_img_BDCT_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_r_address0 <= grp_BDCT_fu_293_image_in_out_address0;
        else 
            image_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    image_r_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln63_fu_434_p2, ap_CS_fsm_state6, grp_BDCT_fu_293_image_in_out_ce0, grp_markov_fu_315_img_BDCT_ce0, ap_CS_fsm_state4, data_in_TVALID_int)
    begin
        if ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            image_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_r_ce0 <= grp_markov_fu_315_img_BDCT_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_r_ce0 <= grp_BDCT_fu_293_image_in_out_ce0;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_ce1_assign_proc : process(ap_CS_fsm_state6, grp_markov_fu_315_img_BDCT_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_r_ce1 <= grp_markov_fu_315_img_BDCT_ce1;
        else 
            image_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_d0_assign_proc : process(ap_CS_fsm_state3, grp_BDCT_fu_293_image_in_out_d0, ap_CS_fsm_state4, data_in_TDATA_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_r_d0 <= data_in_TDATA_int;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_r_d0 <= grp_BDCT_fu_293_image_in_out_d0;
        else 
            image_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_r_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln63_fu_434_p2, grp_BDCT_fu_293_image_in_out_we0, ap_CS_fsm_state4, data_in_TVALID_int)
    begin
        if ((not(((data_in_TVALID_int = ap_const_logic_0) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln63_fu_434_p2 = ap_const_lv1_0))) then 
            image_r_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_r_we0 <= grp_BDCT_fu_293_image_in_out_we0;
        else 
            image_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_we1_assign_proc : process(ap_CS_fsm_state6, grp_markov_fu_315_img_BDCT_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_r_we1 <= grp_markov_fu_315_img_BDCT_we1;
        else 
            image_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_440_p2 <= std_logic_vector(unsigned(j_0_reg_271) + unsigned(ap_const_lv8_1));

    p_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, grp_markov_fu_315_p_address0, zext_ln79_fu_477_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_address0 <= zext_ln79_fu_477_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_address0 <= grp_markov_fu_315_p_address0;
        else 
            p_address0 <= "XXXXXXXX";
        end if; 
    end process;


    p_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, grp_markov_fu_315_p_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_ce0 <= grp_markov_fu_315_p_ce0;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_we0_assign_proc : process(ap_CS_fsm_state6, grp_markov_fu_315_p_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_we0 <= grp_markov_fu_315_p_we0;
        else 
            p_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pre_out_V_read_assign_proc : process(grp_fc_relu6_fu_335_in_stream_V_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pre_out_V_read <= grp_fc_relu6_fu_335_in_stream_V_read;
        else 
            pre_out_V_read <= ap_const_logic_0;
        end if; 
    end process;


    pre_out_V_write_assign_proc : process(icmp_ln76_reg_554_pp0_iter2_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_reg_554_pp0_iter2_reg = ap_const_lv1_0))) then 
            pre_out_V_write <= ap_const_logic_1;
        else 
            pre_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_422_p3 <= (i_0_reg_260 & ap_const_lv7_0);

    weight_in_TREADY_assign_proc : process(weight_in_TVALID, regslice_both_weight_in_V_data_U_ack_in)
    begin
        if (((regslice_both_weight_in_V_data_U_ack_in = ap_const_logic_1) and (weight_in_TVALID = ap_const_logic_1))) then 
            weight_in_TREADY <= ap_const_logic_1;
        else 
            weight_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    weight_in_TREADY_int_assign_proc : process(grp_weight_loader_fu_365_weight_in_TREADY, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weight_in_TREADY_int <= grp_weight_loader_fu_365_weight_in_TREADY;
        else 
            weight_in_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln63_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_422_p3),16));
    zext_ln67_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_455_p2),64));
    zext_ln67_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_271),16));
    zext_ln79_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_282),64));
end behav;
