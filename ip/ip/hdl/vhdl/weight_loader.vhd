-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weight_loader is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_in_TVALID : IN STD_LOGIC;
    weight_in_TREADY : OUT STD_LOGIC;
    weight_in_TLAST : IN STD_LOGIC;
    fc1_m_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    fc1_m_ce0 : OUT STD_LOGIC;
    fc1_m_we0 : OUT STD_LOGIC;
    fc1_m_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    fc1_b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fc1_b_ce0 : OUT STD_LOGIC;
    fc1_b_we0 : OUT STD_LOGIC;
    fc1_b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    fc2_m_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fc2_m_ce0 : OUT STD_LOGIC;
    fc2_m_we0 : OUT STD_LOGIC;
    fc2_m_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of weight_loader is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln15_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln23_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln31_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln39_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_133 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_0_reg_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_155 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_0_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten6_reg_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_0_reg_189 : STD_LOGIC_VECTOR (6 downto 0);
    signal j3_0_reg_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal fc2_b_0_write_assig_reg_211 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc2_b_1_write_assig_reg_223 : STD_LOGIC_VECTOR (15 downto 0);
    signal i4_0_reg_235 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_block_state11_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln15_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_268_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln19_fu_286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln19_reg_472 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln19_1_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln19_1_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_302_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln23_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_492 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln31_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln35_fu_374_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_reg_506 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_1_fu_382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln35_1_reg_511 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_390_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln39_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_427_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_fu_433_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln43_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_fu_437_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal select_ln43_1_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state11 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i1_0_phi_fu_170_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i2_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_1_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_246_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln16_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_308_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln19_fu_319_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln16_fu_315_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln19_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln32_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln32_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_246_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component pic_detec_sptohp_Hfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    pic_detec_sptohp_Hfu_U95 : component pic_detec_sptohp_Hfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_in_TDATA,
        ce => grp_fu_246_ce,
        dout => grp_fu_246_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_reg_166 <= ap_const_lv7_0;
            elsif (((icmp_ln23_reg_488 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i1_0_reg_166 <= i_reg_492;
            end if; 
        end if;
    end process;

    i2_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i2_0_reg_189 <= ap_const_lv7_0;
            elsif (((icmp_ln31_reg_497 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i2_0_reg_189 <= select_ln35_1_reg_511;
            end if; 
        end if;
    end process;

    i4_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i4_0_reg_235 <= ap_const_lv2_0;
            elsif (((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i4_0_reg_235 <= i_5_fu_427_p2;
            end if; 
        end if;
    end process;

    i_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_463 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_144 <= select_ln19_1_reg_477;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_144 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten6_reg_178 <= ap_const_lv8_0;
            elsif (((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten6_reg_178 <= add_ln31_fu_356_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_133 <= add_ln15_fu_268_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_133 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    j3_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j3_0_reg_200 <= ap_const_lv2_0;
            elsif (((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j3_0_reg_200 <= j_1_fu_390_p2;
            end if; 
        end if;
    end process;

    j_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_155 <= j_fu_302_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_155 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_reg_522 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                fc2_b_0_write_assig_reg_211 <= select_ln43_fu_437_p3;
                fc2_b_1_write_assig_reg_223 <= select_ln43_1_fu_444_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_reg_492 <= i_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln15_reg_463 <= icmp_ln15_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln23_reg_488 <= icmp_ln23_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln31_reg_497 <= icmp_ln31_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln39_reg_522 <= icmp_ln39_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln19_1_reg_477 <= select_ln19_1_fu_294_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln19_reg_472 <= select_ln19_fu_286_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln35_1_reg_511 <= select_ln35_1_fu_382_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln35_reg_506 <= select_ln35_fu_374_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                trunc_ln43_reg_531 <= trunc_ln43_fu_433_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln15_fu_262_p2, ap_enable_reg_pp1_iter0, icmp_ln23_fu_333_p2, ap_enable_reg_pp2_iter0, icmp_ln31_fu_350_p2, ap_enable_reg_pp3_iter0, icmp_ln39_fu_421_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln15_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln15_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln23_fu_333_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln23_fu_333_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln31_fu_350_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln31_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln39_fu_421_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln39_fu_421_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln15_fu_268_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_133) + unsigned(ap_const_lv14_1));
    add_ln19_fu_322_p2 <= std_logic_vector(unsigned(zext_ln19_fu_319_p1) + unsigned(zext_ln16_fu_315_p1));
    add_ln31_fu_356_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_178) + unsigned(ap_const_lv8_1));
    add_ln35_fu_410_p2 <= std_logic_vector(unsigned(zext_ln35_fu_407_p1) + unsigned(zext_ln32_fu_403_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp0_iter0, icmp_ln15_fu_262_p2)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp0_iter0, icmp_ln15_fu_262_p2)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp1_iter0, icmp_ln23_fu_333_p2)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln23_fu_333_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp1_iter0, icmp_ln23_fu_333_p2)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln23_fu_333_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp2_iter0, icmp_ln31_fu_350_p2)
    begin
                ap_block_pp2_stage0_11001 <= ((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp2_iter0, icmp_ln31_fu_350_p2)
    begin
                ap_block_pp2_stage0_subdone <= ((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp3_iter0, icmp_ln39_fu_421_p2)
    begin
                ap_block_pp3_stage0_11001 <= ((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(weight_in_TVALID, ap_enable_reg_pp3_iter0, icmp_ln39_fu_421_p2)
    begin
                ap_block_pp3_stage0_subdone <= ((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_state11_pp3_stage0_iter0_assign_proc : process(weight_in_TVALID, icmp_ln39_fu_421_p2)
    begin
                ap_block_state11_pp3_stage0_iter0 <= ((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0));
    end process;

        ap_block_state12_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(weight_in_TVALID, icmp_ln15_fu_262_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp1_stage0_iter0_assign_proc : process(weight_in_TVALID, icmp_ln23_fu_333_p2)
    begin
                ap_block_state5_pp1_stage0_iter0 <= ((icmp_ln23_fu_333_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0));
    end process;

        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp2_stage0_iter0_assign_proc : process(weight_in_TVALID, icmp_ln31_fu_350_p2)
    begin
                ap_block_state8_pp2_stage0_iter0 <= ((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (weight_in_TVALID = ap_const_logic_0));
    end process;

        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln15_fu_262_p2)
    begin
        if ((icmp_ln15_fu_262_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln23_fu_333_p2)
    begin
        if ((icmp_ln23_fu_333_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln31_fu_350_p2)
    begin
        if ((icmp_ln31_fu_350_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state11_assign_proc : process(icmp_ln39_fu_421_p2)
    begin
        if ((icmp_ln39_fu_421_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_phi_fu_170_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, i1_0_reg_166, icmp_ln23_reg_488, i_reg_492, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln23_reg_488 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i1_0_phi_fu_170_p4 <= i_reg_492;
        else 
            ap_phi_mux_i1_0_phi_fu_170_p4 <= i1_0_reg_166;
        end if; 
    end process;


    ap_phi_mux_i2_0_phi_fu_193_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, i2_0_reg_189, icmp_ln31_reg_497, select_ln35_1_reg_511, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln31_reg_497 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i2_0_phi_fu_193_p4 <= select_ln35_1_reg_511;
        else 
            ap_phi_mux_i2_0_phi_fu_193_p4 <= i2_0_reg_189;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_148_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_0_reg_144, icmp_ln15_reg_463, select_ln19_1_reg_477, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln15_reg_463 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_148_p4 <= select_ln19_1_reg_477;
        else 
            ap_phi_mux_i_0_phi_fu_148_p4 <= i_0_reg_144;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= fc2_b_0_write_assig_reg_211;
    ap_return_1 <= fc2_b_1_write_assig_reg_223;
    fc1_b_address0 <= zext_ln27_fu_345_p1(6 - 1 downto 0);

    fc1_b_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fc1_b_ce0 <= ap_const_logic_1;
        else 
            fc1_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_b_d0 <= grp_fu_246_p1;

    fc1_b_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln23_reg_488, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln23_reg_488 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fc1_b_we0 <= ap_const_logic_1;
        else 
            fc1_b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_m_address0 <= zext_ln19_1_fu_328_p1(14 - 1 downto 0);

    fc1_m_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fc1_m_ce0 <= ap_const_logic_1;
        else 
            fc1_m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_m_d0 <= grp_fu_246_p1;

    fc1_m_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln15_reg_463, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln15_reg_463 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fc1_m_we0 <= ap_const_logic_1;
        else 
            fc1_m_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_m_address0 <= zext_ln35_1_fu_416_p1(7 - 1 downto 0);

    fc2_m_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            fc2_m_ce0 <= ap_const_logic_1;
        else 
            fc2_m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_m_d0 <= grp_fu_246_p1;

    fc2_m_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln31_reg_497, ap_enable_reg_pp2_iter1)
    begin
        if (((icmp_ln31_reg_497 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            fc2_m_we0 <= ap_const_logic_1;
        else 
            fc2_m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_246_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            grp_fu_246_ce <= ap_const_logic_1;
        else 
            grp_fu_246_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_274_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_148_p4) + unsigned(ap_const_lv8_1));
    i_4_fu_362_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_phi_fu_193_p4) + unsigned(ap_const_lv7_1));
    i_5_fu_427_p2 <= std_logic_vector(unsigned(i4_0_reg_235) + unsigned(ap_const_lv2_1));
    i_fu_339_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_phi_fu_170_p4) + unsigned(ap_const_lv7_1));
    icmp_ln15_fu_262_p2 <= "1" when (indvar_flatten_reg_133 = ap_const_lv14_3100) else "0";
    icmp_ln16_fu_280_p2 <= "1" when (j_0_reg_155 = ap_const_lv7_40) else "0";
    icmp_ln23_fu_333_p2 <= "1" when (ap_phi_mux_i1_0_phi_fu_170_p4 = ap_const_lv7_40) else "0";
    icmp_ln31_fu_350_p2 <= "1" when (indvar_flatten6_reg_178 = ap_const_lv8_80) else "0";
    icmp_ln32_fu_368_p2 <= "1" when (j3_0_reg_200 = ap_const_lv2_2) else "0";
    icmp_ln39_fu_421_p2 <= "1" when (i4_0_reg_235 = ap_const_lv2_2) else "0";
    j_1_fu_390_p2 <= std_logic_vector(unsigned(select_ln35_fu_374_p3) + unsigned(ap_const_lv2_1));
    j_fu_302_p2 <= std_logic_vector(unsigned(select_ln19_fu_286_p3) + unsigned(ap_const_lv7_1));
    select_ln19_1_fu_294_p3 <= 
        i_2_fu_274_p2 when (icmp_ln16_fu_280_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_148_p4;
    select_ln19_fu_286_p3 <= 
        ap_const_lv7_0 when (icmp_ln16_fu_280_p2(0) = '1') else 
        j_0_reg_155;
    select_ln35_1_fu_382_p3 <= 
        i_4_fu_362_p2 when (icmp_ln32_fu_368_p2(0) = '1') else 
        ap_phi_mux_i2_0_phi_fu_193_p4;
    select_ln35_fu_374_p3 <= 
        ap_const_lv2_0 when (icmp_ln32_fu_368_p2(0) = '1') else 
        j3_0_reg_200;
    select_ln43_1_fu_444_p3 <= 
        grp_fu_246_p1 when (trunc_ln43_reg_531(0) = '1') else 
        fc2_b_1_write_assig_reg_223;
    select_ln43_fu_437_p3 <= 
        fc2_b_0_write_assig_reg_211 when (trunc_ln43_reg_531(0) = '1') else 
        grp_fu_246_p1;
    tmp_6_fu_308_p3 <= (select_ln19_1_reg_477 & ap_const_lv6_0);
    tmp_8_fu_396_p3 <= (select_ln35_1_reg_511 & ap_const_lv1_0);
    trunc_ln43_fu_433_p1 <= i4_0_reg_235(1 - 1 downto 0);

    weight_in_TDATA_blk_n_assign_proc : process(weight_in_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln15_fu_262_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln23_fu_333_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, icmp_ln31_fu_350_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, icmp_ln39_fu_421_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln23_fu_333_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            weight_in_TDATA_blk_n <= weight_in_TVALID;
        else 
            weight_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weight_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln15_fu_262_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln23_fu_333_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln31_fu_350_p2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, icmp_ln39_fu_421_p2, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((icmp_ln31_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln23_fu_333_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln15_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln39_fu_421_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            weight_in_TREADY <= ap_const_logic_1;
        else 
            weight_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_308_p3),15));
    zext_ln19_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_322_p2),64));
    zext_ln19_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_reg_472),15));
    zext_ln27_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_166),64));
    zext_ln32_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_396_p3),9));
    zext_ln35_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_410_p2),64));
    zext_ln35_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_reg_506),9));
end behav;
