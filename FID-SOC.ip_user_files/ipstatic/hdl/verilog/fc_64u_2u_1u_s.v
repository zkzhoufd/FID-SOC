// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_64u_2u_1u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        bias_0_read,
        bias_1_read,
        fc2_m_address0,
        fc2_m_ce0,
        fc2_m_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_pp0_stage0 = 18'd2;
parameter    ap_ST_fsm_state4 = 18'd4;
parameter    ap_ST_fsm_state5 = 18'd8;
parameter    ap_ST_fsm_state6 = 18'd16;
parameter    ap_ST_fsm_state7 = 18'd32;
parameter    ap_ST_fsm_pp2_stage0 = 18'd64;
parameter    ap_ST_fsm_pp2_stage1 = 18'd128;
parameter    ap_ST_fsm_pp2_stage2 = 18'd256;
parameter    ap_ST_fsm_state18 = 18'd512;
parameter    ap_ST_fsm_state19 = 18'd1024;
parameter    ap_ST_fsm_state20 = 18'd2048;
parameter    ap_ST_fsm_state21 = 18'd4096;
parameter    ap_ST_fsm_state22 = 18'd8192;
parameter    ap_ST_fsm_state23 = 18'd16384;
parameter    ap_ST_fsm_state24 = 18'd32768;
parameter    ap_ST_fsm_pp3_stage0 = 18'd65536;
parameter    ap_ST_fsm_state27 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [15:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
input  [15:0] bias_0_read;
input  [15:0] bias_1_read;
output  [6:0] fc2_m_address0;
output   fc2_m_ce0;
input  [15:0] fc2_m_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_read;
reg out_stream_V_write;
reg fc2_m_ce0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] x_1_address0;
reg    x_1_ce0;
reg    x_1_we0;
wire   [15:0] x_1_q0;
reg   [15:0] y_1_0;
reg   [15:0] y_1_1;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln24_reg_419;
reg    out_stream_V_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln45_reg_504;
reg   [6:0] i_0_reg_164;
reg   [6:0] im_0_reg_198;
reg   [1:0] om2_0_reg_209;
wire   [15:0] grp_fu_240_p3;
reg   [15:0] reg_248;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state17_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln24_fu_254_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] i_fu_260_p2;
reg   [6:0] i_reg_423;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] om_fu_277_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln35_fu_299_p2;
wire    ap_CS_fsm_state7;
wire   [1:0] om_4_fu_305_p2;
reg   [1:0] om_4_reg_443;
wire   [8:0] zext_ln40_fu_311_p1;
reg   [8:0] zext_ln40_reg_448;
wire   [0:0] trunc_ln40_fu_315_p1;
reg   [0:0] trunc_ln40_reg_453;
wire   [0:0] icmp_ln37_fu_319_p2;
reg   [0:0] icmp_ln37_reg_459;
wire   [6:0] im_fu_325_p2;
reg   [6:0] im_reg_463;
reg    ap_enable_reg_pp2_iter0;
reg   [15:0] x_1_load_reg_478;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state9_pp2_stage1_iter0;
wire    ap_block_state12_pp2_stage1_iter1;
wire    ap_block_state15_pp2_stage1_iter2;
wire    ap_block_pp2_stage1_11001;
reg   [15:0] fc2_m_load_reg_483;
wire   [15:0] grp_fu_228_p2;
reg   [15:0] y_i_reg_488;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_state10_pp2_stage2_iter0;
wire    ap_block_state13_pp2_stage2_iter1;
wire    ap_block_state16_pp2_stage2_iter2;
wire    ap_block_pp2_stage2_11001;
wire   [15:0] select_ln42_1_fu_370_p3;
reg   [15:0] select_ln42_1_reg_493;
wire   [15:0] grp_fu_224_p2;
reg   [15:0] tmp_s_reg_498;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln45_fu_385_p2;
wire    ap_block_state25_pp3_stage0_iter0;
reg    ap_block_state26_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [1:0] om_3_fu_391_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] trunc_ln47_fu_397_p1;
reg   [0:0] trunc_ln47_reg_513;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage2_subdone;
reg    ap_enable_reg_pp2_iter3;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state25;
reg   [6:0] ap_phi_mux_i_0_phi_fu_168_p4;
reg   [1:0] om_0_reg_176;
wire   [0:0] icmp_ln30_fu_271_p2;
wire    ap_CS_fsm_state4;
reg   [1:0] om1_0_reg_187;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state6;
reg   [6:0] ap_phi_mux_im_0_phi_fu_202_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln27_fu_266_p1;
wire   [63:0] zext_ln39_2_fu_353_p1;
wire   [63:0] zext_ln39_fu_331_p1;
wire   [0:0] trunc_ln32_fu_283_p1;
wire   [15:0] grp_fu_220_p2;
reg   [15:0] ap_sig_allocacmp_y_1_0_load_2;
reg   [15:0] grp_load_fu_232_p1;
reg   [15:0] ap_sig_allocacmp_y_1_1_load_2;
reg   [15:0] grp_load_fu_236_p1;
reg    ap_block_pp3_stage0_01001;
wire   [15:0] grp_fu_220_p0;
wire    ap_CS_fsm_state19;
wire    ap_block_pp2_stage2;
wire   [7:0] tmp_964_fu_336_p3;
wire   [8:0] zext_ln39_1_fu_344_p1;
wire   [8:0] add_ln39_fu_348_p2;
wire    ap_CS_fsm_state27;
reg   [17:0] ap_NS_fsm;
wire    ap_block_pp2_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 y_1_0 = 16'd0;
#0 y_1_1 = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
end

fc_relu6_y #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
x_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_1_address0),
    .ce0(x_1_ce0),
    .we0(x_1_we0),
    .d0(in_stream_V_dout),
    .q0(x_1_q0)
);

pic_detec_hadd_16Bew #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
pic_detec_hadd_16Bew_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_220_p0),
    .din1(y_i_reg_488),
    .ce(1'b1),
    .dout(grp_fu_220_p2)
);

pic_detec_hadd_16CeG #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
pic_detec_hadd_16CeG_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_248),
    .din1(select_ln42_1_reg_493),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

pic_detec_hmul_16DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
pic_detec_hmul_16DeQ_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_1_load_reg_478),
    .din1(fc2_m_load_reg_483),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln35_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((icmp_ln35_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state25))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln35_fu_299_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state25))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state25);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln35_fu_299_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_419 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_164 <= i_reg_423;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_164 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_459 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        im_0_reg_198 <= im_reg_463;
    end else if (((icmp_ln35_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        im_0_reg_198 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        om1_0_reg_187 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        om1_0_reg_187 <= om_4_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln35_fu_299_p2 == 1'd1))) begin
        om2_0_reg_209 <= 2'd0;
    end else if (((icmp_ln45_fu_385_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        om2_0_reg_209 <= om_3_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        om_0_reg_176 <= 2'd0;
    end else if (((icmp_ln30_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        om_0_reg_176 <= om_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln40_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        y_1_0 <= tmp_s_reg_498;
    end else if (((trunc_ln40_reg_453 == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_1_0 <= grp_fu_220_p2;
    end else if (((trunc_ln32_fu_283_p1 == 1'd0) & (icmp_ln30_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_1_0 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (trunc_ln40_reg_453 == 1'd1))) begin
        y_1_1 <= tmp_s_reg_498;
    end else if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (trunc_ln40_reg_453 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        y_1_1 <= grp_fu_220_p2;
    end else if (((icmp_ln30_fu_271_p2 == 1'd0) & (trunc_ln32_fu_283_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        y_1_1 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_459 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        fc2_m_load_reg_483 <= fc2_m_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_423 <= i_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln24_reg_419 <= icmp_ln24_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln37_reg_459 <= icmp_ln37_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln45_reg_504 <= icmp_ln45_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        im_reg_463 <= im_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        om_4_reg_443 <= om_4_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_248 <= grp_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        select_ln42_1_reg_493 <= select_ln42_1_fu_370_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_s_reg_498 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        trunc_ln40_reg_453 <= trunc_ln40_fu_315_p1;
        zext_ln40_reg_448[1 : 0] <= zext_ln40_fu_311_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_385_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        trunc_ln47_reg_513 <= trunc_ln47_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_459 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        x_1_load_reg_478 <= x_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        y_i_reg_488 <= grp_fu_228_p2;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_254_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_319_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_385_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_168_p4 = i_reg_423;
    end else begin
        ap_phi_mux_i_0_phi_fu_168_p4 = i_0_reg_164;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_459 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_im_0_phi_fu_202_p4 = im_reg_463;
    end else begin
        ap_phi_mux_im_0_phi_fu_202_p4 = im_0_reg_198;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln40_reg_453 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_sig_allocacmp_y_1_0_load_2 = grp_fu_220_p2;
    end else begin
        ap_sig_allocacmp_y_1_0_load_2 = y_1_0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (trunc_ln40_reg_453 == 1'd1))) begin
        ap_sig_allocacmp_y_1_1_load_2 = grp_fu_220_p2;
    end else begin
        ap_sig_allocacmp_y_1_1_load_2 = y_1_1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        fc2_m_ce0 = 1'b1;
    end else begin
        fc2_m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0) & (icmp_ln45_reg_504 == 1'd0) & (trunc_ln47_reg_513 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((trunc_ln40_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_load_fu_232_p1 = y_1_0;
    end else if (((trunc_ln40_reg_453 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_232_p1 = ap_sig_allocacmp_y_1_0_load_2;
    end else begin
        grp_load_fu_232_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0) & (icmp_ln45_reg_504 == 1'd0) & (trunc_ln47_reg_513 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b1 == ap_CS_fsm_state18) & (trunc_ln40_reg_453 == 1'd1)))) begin
        grp_load_fu_236_p1 = y_1_1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (trunc_ln40_reg_453 == 1'd1))) begin
        grp_load_fu_236_p1 = ap_sig_allocacmp_y_1_1_load_2;
    end else begin
        grp_load_fu_236_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_419 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_419 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln45_reg_504 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_504 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_1_address0 = zext_ln39_fu_331_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_1_address0 = zext_ln27_fu_266_p1;
    end else begin
        x_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_419 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_1_we0 = 1'b1;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln30_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln35_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln37_fu_319_p2 == 1'd1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln37_fu_319_p2 == 1'd1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln45_fu_385_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln45_fu_385_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_fu_348_p2 = (zext_ln40_reg_448 + zext_ln39_1_fu_344_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln24_reg_419 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln24_reg_419 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((icmp_ln45_reg_504 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((icmp_ln45_reg_504 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((icmp_ln45_reg_504 == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_state10_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp3_stage0_iter1 = ((icmp_ln45_reg_504 == 1'd0) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln24_reg_419 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign fc2_m_address0 = zext_ln39_2_fu_353_p1;

assign grp_fu_220_p0 = ((trunc_ln40_reg_453[0:0] === 1'b1) ? grp_load_fu_236_p1 : grp_load_fu_232_p1);

assign grp_fu_240_p3 = ((trunc_ln40_reg_453[0:0] === 1'b1) ? grp_load_fu_236_p1 : grp_load_fu_232_p1);

assign i_fu_260_p2 = (ap_phi_mux_i_0_phi_fu_168_p4 + 7'd1);

assign icmp_ln24_fu_254_p2 = ((ap_phi_mux_i_0_phi_fu_168_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_271_p2 = ((om_0_reg_176 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_299_p2 = ((om1_0_reg_187 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_319_p2 = ((ap_phi_mux_im_0_phi_fu_202_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_385_p2 = ((om2_0_reg_209 == 2'd2) ? 1'b1 : 1'b0);

assign im_fu_325_p2 = (ap_phi_mux_im_0_phi_fu_202_p4 + 7'd1);

assign om_3_fu_391_p2 = (om2_0_reg_209 + 2'd1);

assign om_4_fu_305_p2 = (om1_0_reg_187 + 2'd1);

assign om_fu_277_p2 = (om_0_reg_176 + 2'd1);

assign out_stream_V_din = ((trunc_ln47_reg_513[0:0] === 1'b1) ? grp_load_fu_236_p1 : grp_load_fu_232_p1);

assign select_ln42_1_fu_370_p3 = ((trunc_ln40_reg_453[0:0] === 1'b1) ? bias_1_read : bias_0_read);

assign tmp_964_fu_336_p3 = {{ap_phi_mux_im_0_phi_fu_202_p4}, {1'd0}};

assign trunc_ln32_fu_283_p1 = om_0_reg_176[0:0];

assign trunc_ln40_fu_315_p1 = om1_0_reg_187[0:0];

assign trunc_ln47_fu_397_p1 = om2_0_reg_209[0:0];

assign zext_ln27_fu_266_p1 = i_0_reg_164;

assign zext_ln39_1_fu_344_p1 = tmp_964_fu_336_p3;

assign zext_ln39_2_fu_353_p1 = add_ln39_fu_348_p2;

assign zext_ln39_fu_331_p1 = ap_phi_mux_im_0_phi_fu_202_p4;

assign zext_ln40_fu_311_p1 = om1_0_reg_187;

always @ (posedge ap_clk) begin
    zext_ln40_reg_448[8:2] <= 7'b0000000;
end

endmodule //fc_64u_2u_1u_s
