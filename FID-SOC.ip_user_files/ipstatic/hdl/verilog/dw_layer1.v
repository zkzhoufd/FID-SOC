// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dw_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_V_dout,
        in_stream_V_V_empty_n,
        in_stream_V_V_read,
        out_stream_V_V_din,
        out_stream_V_V_full_n,
        out_stream_V_V_write,
        dw_weights_scale,
        data2dw1_scale_V_dout,
        data2dw1_scale_V_empty_n,
        data2dw1_scale_V_read,
        dw12pw1_scale_V_din,
        dw12pw1_scale_V_full_n,
        dw12pw1_scale_V_write,
        dw_weight1_V_2,
        dw_weight1_V_0,
        dw_weight1_V_1
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_pp0_stage0 = 42'd2;
parameter    ap_ST_fsm_state4 = 42'd4;
parameter    ap_ST_fsm_state5 = 42'd8;
parameter    ap_ST_fsm_state6 = 42'd16;
parameter    ap_ST_fsm_pp2_stage0 = 42'd32;
parameter    ap_ST_fsm_state10 = 42'd64;
parameter    ap_ST_fsm_pp3_stage0 = 42'd128;
parameter    ap_ST_fsm_state13 = 42'd256;
parameter    ap_ST_fsm_state14 = 42'd512;
parameter    ap_ST_fsm_state15 = 42'd1024;
parameter    ap_ST_fsm_state16 = 42'd2048;
parameter    ap_ST_fsm_state17 = 42'd4096;
parameter    ap_ST_fsm_state18 = 42'd8192;
parameter    ap_ST_fsm_state19 = 42'd16384;
parameter    ap_ST_fsm_state20 = 42'd32768;
parameter    ap_ST_fsm_state21 = 42'd65536;
parameter    ap_ST_fsm_state22 = 42'd131072;
parameter    ap_ST_fsm_state23 = 42'd262144;
parameter    ap_ST_fsm_state24 = 42'd524288;
parameter    ap_ST_fsm_state25 = 42'd1048576;
parameter    ap_ST_fsm_state26 = 42'd2097152;
parameter    ap_ST_fsm_state27 = 42'd4194304;
parameter    ap_ST_fsm_state28 = 42'd8388608;
parameter    ap_ST_fsm_state29 = 42'd16777216;
parameter    ap_ST_fsm_state30 = 42'd33554432;
parameter    ap_ST_fsm_state31 = 42'd67108864;
parameter    ap_ST_fsm_state32 = 42'd134217728;
parameter    ap_ST_fsm_state33 = 42'd268435456;
parameter    ap_ST_fsm_state34 = 42'd536870912;
parameter    ap_ST_fsm_state35 = 42'd1073741824;
parameter    ap_ST_fsm_state36 = 42'd2147483648;
parameter    ap_ST_fsm_state37 = 42'd4294967296;
parameter    ap_ST_fsm_state38 = 42'd8589934592;
parameter    ap_ST_fsm_state39 = 42'd17179869184;
parameter    ap_ST_fsm_state40 = 42'd34359738368;
parameter    ap_ST_fsm_state41 = 42'd68719476736;
parameter    ap_ST_fsm_state42 = 42'd137438953472;
parameter    ap_ST_fsm_state43 = 42'd274877906944;
parameter    ap_ST_fsm_state44 = 42'd549755813888;
parameter    ap_ST_fsm_pp4_stage0 = 42'd1099511627776;
parameter    ap_ST_fsm_state64 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_stream_V_V_dout;
input   in_stream_V_V_empty_n;
output   in_stream_V_V_read;
output  [7:0] out_stream_V_V_din;
input   out_stream_V_V_full_n;
output   out_stream_V_V_write;
input  [31:0] dw_weights_scale;
input  [31:0] data2dw1_scale_V_dout;
input   data2dw1_scale_V_empty_n;
output   data2dw1_scale_V_read;
output  [31:0] dw12pw1_scale_V_din;
input   dw12pw1_scale_V_full_n;
output   dw12pw1_scale_V_write;
input  [7:0] dw_weight1_V_2;
input  [7:0] dw_weight1_V_0;
input  [7:0] dw_weight1_V_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_V_read;
reg out_stream_V_V_write;
reg data2dw1_scale_V_read;
reg dw12pw1_scale_V_write;

(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mask_table2_address0;
reg    mask_table2_ce0;
wire   [51:0] mask_table2_q0;
wire   [5:0] one_half_table3_address0;
reg    one_half_table3_ce0;
wire   [52:0] one_half_table3_q0;
reg    in_stream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln37_reg_1142;
reg    out_stream_V_V_blk_n;
reg    ap_enable_reg_pp4_iter18;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln75_reg_1252;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter17_reg;
reg    data2dw1_scale_V_blk_n;
reg    dw12pw1_scale_V_blk_n;
wire    ap_CS_fsm_state44;
reg   [3:0] w_0_reg_329;
reg   [4:0] indvar_flatten_reg_352;
reg   [1:0] kw_0_reg_363;
reg   [3:0] ow2_0_reg_374;
reg   [31:0] p_0129_0_reg_385;
reg   [31:0] p_0137_0_reg_397;
reg   [3:0] ow3_0_reg_409;
reg   [3:0] ow4_0_reg_420;
wire   [31:0] grp_fu_440_p1;
reg   [31:0] reg_450;
wire    ap_CS_fsm_state19;
wire    ap_block_state45_pp4_stage0_iter0;
wire    ap_block_state46_pp4_stage0_iter1;
wire    ap_block_state47_pp4_stage0_iter2;
wire    ap_block_state48_pp4_stage0_iter3;
wire    ap_block_state49_pp4_stage0_iter4;
wire    ap_block_state50_pp4_stage0_iter5;
wire    ap_block_state51_pp4_stage0_iter6;
wire    ap_block_state52_pp4_stage0_iter7;
wire    ap_block_state53_pp4_stage0_iter8;
wire    ap_block_state54_pp4_stage0_iter9;
wire    ap_block_state55_pp4_stage0_iter10;
wire    ap_block_state56_pp4_stage0_iter11;
wire    ap_block_state57_pp4_stage0_iter12;
wire    ap_block_state58_pp4_stage0_iter13;
wire    ap_block_state59_pp4_stage0_iter14;
wire    ap_block_state60_pp4_stage0_iter15;
wire    ap_block_state61_pp4_stage0_iter16;
wire    ap_block_state62_pp4_stage0_iter17;
reg    ap_block_state63_pp4_stage0_iter18;
reg    ap_block_pp4_stage0_11001;
reg    ap_enable_reg_pp4_iter6;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter5_reg;
wire   [31:0] grp_fu_431_p2;
reg   [31:0] reg_456;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
reg    ap_enable_reg_pp4_iter10;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter9_reg;
reg    ap_block_state1;
reg   [31:0] tmp_126_reg_1137;
wire   [0:0] icmp_ln37_fu_463_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] w_fu_469_p2;
reg   [3:0] w_reg_1146;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] ow_fu_486_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln49_fu_534_p2;
reg   [0:0] icmp_ln49_reg_1177;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state8_pp2_stage0_iter1;
wire    ap_block_state9_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln49_reg_1177_pp2_iter1_reg;
wire   [4:0] add_ln49_fu_540_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [1:0] select_ln49_1_fu_566_p3;
reg   [1:0] select_ln49_1_reg_1186;
wire   [7:0] select_ln49_2_fu_597_p3;
reg   [7:0] select_ln49_2_reg_1191;
reg  signed [7:0] select_ln49_2_reg_1191_pp2_iter1_reg;
reg   [2:0] y_V_addr_4_reg_1201;
reg   [2:0] y_V_addr_4_reg_1201_pp2_iter1_reg;
wire   [3:0] ow_1_fu_621_p2;
wire   [7:0] x_V_3_1_q0;
reg  signed [7:0] x_V_3_load_reg_1212;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] icmp_ln56_fu_633_p2;
reg   [0:0] icmp_ln56_reg_1217;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state11_pp3_stage0_iter0;
wire    ap_block_state12_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [3:0] ow_2_fu_639_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] select_ln59_fu_656_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] tmp_max_V_fu_670_p3;
wire   [31:0] select_ln67_fu_706_p3;
reg   [31:0] select_ln67_reg_1241;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_435_p2;
reg   [31:0] shrink_reg_1246;
wire    ap_CS_fsm_state35;
wire   [0:0] icmp_ln75_fu_714_p2;
wire    ap_CS_fsm_pp4_stage0;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter1_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter2_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter3_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter4_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter6_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter7_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter8_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter10_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter11_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter12_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter13_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter14_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter15_reg;
reg   [0:0] icmp_ln75_reg_1252_pp4_iter16_reg;
wire   [3:0] ow_3_fu_720_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [31:0] y_V_2_q0;
reg    ap_enable_reg_pp4_iter1;
reg   [0:0] p_Result_75_reg_1271;
reg   [0:0] p_Result_75_reg_1271_pp4_iter12_reg;
wire   [63:0] grp_fu_447_p1;
reg   [63:0] x_assign_reg_1277;
reg   [63:0] x_assign_reg_1277_pp4_iter13_reg;
wire   [0:0] icmp_ln849_fu_757_p2;
reg   [0:0] icmp_ln849_reg_1282;
reg   [0:0] icmp_ln849_reg_1282_pp4_iter13_reg;
wire   [0:0] icmp_ln849_4_fu_763_p2;
reg   [0:0] icmp_ln849_4_reg_1288;
reg   [0:0] icmp_ln849_4_reg_1288_pp4_iter13_reg;
wire   [62:0] trunc_ln368_fu_785_p1;
reg   [62:0] trunc_ln368_reg_1303;
wire   [63:0] bitcast_ln849_fu_853_p1;
reg   [63:0] bitcast_ln849_reg_1308;
wire   [31:0] grp_fu_444_p1;
reg   [31:0] outprepare_tmp_reg_1318;
wire   [31:0] reg_V_fu_874_p1;
reg   [31:0] reg_V_reg_1323;
reg   [0:0] p_Result_79_reg_1328;
wire   [7:0] trunc_ln283_fu_907_p1;
reg   [7:0] trunc_ln283_reg_1333;
wire   [0:0] icmp_ln278_fu_919_p2;
reg   [0:0] icmp_ln278_reg_1339;
wire   [0:0] icmp_ln282_fu_935_p2;
reg   [0:0] icmp_ln282_reg_1345;
wire   [0:0] icmp_ln285_fu_947_p2;
reg   [0:0] icmp_ln285_reg_1350;
wire  signed [8:0] sh_amt_12_fu_953_p2;
reg  signed [8:0] sh_amt_12_reg_1355;
wire   [0:0] and_ln284_fu_997_p2;
reg   [0:0] and_ln284_reg_1360;
wire   [7:0] select_ln285_fu_1009_p3;
reg   [7:0] select_ln285_reg_1365;
wire   [0:0] and_ln295_fu_1029_p2;
reg   [0:0] and_ln295_reg_1370;
wire   [7:0] outprepare_V_fu_1116_p3;
reg   [7:0] outprepare_V_reg_1375;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state10;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state11;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state45;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter7;
reg    ap_enable_reg_pp4_iter8;
reg    ap_enable_reg_pp4_iter9;
reg    ap_enable_reg_pp4_iter11;
reg    ap_enable_reg_pp4_iter12;
reg    ap_enable_reg_pp4_iter13;
reg    ap_enable_reg_pp4_iter14;
reg    ap_enable_reg_pp4_iter15;
reg    ap_enable_reg_pp4_iter16;
reg    ap_enable_reg_pp4_iter17;
reg   [3:0] x_V_3_1_address0;
reg    x_V_3_1_ce0;
reg    x_V_3_1_we0;
reg   [2:0] y_V_2_address0;
reg    y_V_2_ce0;
reg    y_V_2_we0;
reg   [2:0] y_V_2_address1;
reg    y_V_2_ce1;
reg    y_V_2_we1;
wire   [31:0] y_V_2_q1;
reg   [3:0] ap_phi_mux_w_0_phi_fu_333_p4;
reg   [3:0] ow_0_reg_341;
wire   [0:0] icmp_ln43_fu_480_p2;
wire    ap_CS_fsm_state4;
reg   [1:0] ap_phi_mux_kw_0_phi_fu_367_p4;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln40_fu_475_p1;
wire   [63:0] zext_ln45_fu_492_p1;
wire   [63:0] zext_ln52_fu_611_p1;
wire   [63:0] zext_ln53_fu_616_p1;
wire   [63:0] zext_ln59_fu_645_p1;
wire   [63:0] zext_ln77_fu_726_p1;
wire   [63:0] zext_ln498_fu_779_p1;
reg    ap_block_pp4_stage0_01001;
wire   [31:0] grp_fu_1123_p3;
reg   [31:0] grp_fu_431_p0;
reg   [31:0] grp_fu_431_p1;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state20;
reg   [31:0] grp_fu_440_p0;
wire    ap_CS_fsm_state14;
wire   [63:0] grp_fu_444_p0;
wire   [0:0] icmp_ln7_fu_509_p2;
wire   [0:0] icmp_ln7_4_fu_521_p2;
wire   [7:0] select_ln7_fu_515_p3;
wire   [0:0] icmp_ln50_fu_552_p2;
wire   [1:0] kw_fu_546_p2;
wire   [0:0] icmp_ln7_5_fu_578_p2;
wire   [7:0] select_ln7_2_fu_584_p3;
wire   [7:0] select_ln7_3_fu_590_p3;
wire   [7:0] select_ln7_1_fu_527_p3;
wire   [3:0] zext_ln49_fu_574_p1;
wire   [3:0] select_ln49_fu_558_p3;
wire   [3:0] add_ln52_fu_605_p2;
wire   [0:0] icmp_ln895_1_fu_650_p2;
wire   [0:0] icmp_ln887_fu_664_p2;
wire   [0:0] tmp_fu_678_p3;
wire   [31:0] tmp_min_V_fu_686_p2;
wire   [31:0] select_ln65_fu_692_p3;
wire   [0:0] icmp_ln895_fu_700_p2;
wire   [31:0] bitcast_ln475_fu_731_p1;
wire   [63:0] p_Val2_s_fu_743_p1;
wire   [10:0] tmp_V_19_fu_747_p4;
wire   [5:0] index_V_fu_769_p4;
wire   [63:0] p_Result_77_fu_800_p3;
wire   [63:0] zext_ln209_fu_796_p1;
wire   [63:0] p_Val2_41_fu_806_p2;
wire   [51:0] tmp_V_20_fu_812_p1;
wire   [51:0] xor_ln1309_fu_816_p2;
wire   [11:0] tmp_106_fu_828_p4;
wire   [51:0] xs_sig_V_fu_822_p2;
wire   [63:0] p_Result_76_fu_789_p3;
wire   [63:0] p_Result_78_fu_838_p3;
wire   [63:0] select_ln849_fu_846_p3;
wire   [0:0] xor_ln849_fu_857_p2;
wire   [0:0] and_ln849_fu_862_p2;
wire   [7:0] p_Result_s_fu_889_p4;
wire   [22:0] trunc_ln270_fu_903_p1;
wire   [30:0] trunc_ln262_fu_877_p1;
wire   [8:0] exp_V_fu_899_p1;
wire  signed [8:0] sh_amt_fu_925_p2;
wire   [5:0] tmp_124_fu_959_p4;
wire   [23:0] tmp_105_fu_911_p3;
wire  signed [23:0] sext_ln281_fu_931_p1;
wire   [23:0] lshr_ln286_fu_975_p2;
wire   [0:0] or_ln282_fu_985_p2;
wire   [0:0] icmp_ln284_fu_941_p2;
wire   [0:0] xor_ln282_fu_991_p2;
wire   [0:0] and_ln285_fu_1003_p2;
wire   [7:0] trunc_ln286_fu_981_p1;
wire   [0:0] or_ln284_fu_1017_p2;
wire   [0:0] icmp_ln295_fu_969_p2;
wire   [0:0] xor_ln284_fu_1023_p2;
wire   [0:0] tmp_125_fu_1038_p3;
wire  signed [31:0] sext_ln294_fu_1035_p1;
wire   [7:0] sext_ln294cast_fu_1053_p1;
wire   [7:0] shl_ln297_fu_1057_p2;
wire   [7:0] select_ln295_fu_1062_p3;
wire   [0:0] xor_ln285_fu_1075_p2;
wire   [0:0] and_ln285_12_fu_1080_p2;
wire   [7:0] select_ln288_fu_1045_p3;
wire   [7:0] select_ln278_fu_1068_p3;
wire   [0:0] xor_ln278_fu_1093_p2;
wire   [0:0] and_ln282_fu_1098_p2;
wire   [7:0] select_ln285_12_fu_1085_p3;
wire   [7:0] select_ln282_fu_1103_p3;
wire   [7:0] sub_ln461_fu_1110_p2;
reg    grp_fu_431_ce;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
reg    grp_fu_440_ce;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    grp_fu_444_ce;
reg    grp_fu_447_ce;
wire    ap_CS_fsm_state64;
reg   [41:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 42'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter18 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp4_iter9 = 1'b0;
#0 ap_enable_reg_pp4_iter11 = 1'b0;
#0 ap_enable_reg_pp4_iter12 = 1'b0;
#0 ap_enable_reg_pp4_iter13 = 1'b0;
#0 ap_enable_reg_pp4_iter14 = 1'b0;
#0 ap_enable_reg_pp4_iter15 = 1'b0;
#0 ap_enable_reg_pp4_iter16 = 1'b0;
#0 ap_enable_reg_pp4_iter17 = 1'b0;
end

dw_layer1_mask_taIfE #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table2_address0),
    .ce0(mask_table2_ce0),
    .q0(mask_table2_q0)
);

dw_layer1_one_halJfO #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table3_address0),
    .ce0(one_half_table3_ce0),
    .q0(one_half_table3_q0)
);

dw_layer1_x_V_3_1 #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
x_V_3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_V_3_1_address0),
    .ce0(x_V_3_1_ce0),
    .we0(x_V_3_1_we0),
    .d0(in_stream_V_V_dout),
    .q0(x_V_3_1_q0)
);

dw_layer1_y_V_2 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
y_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_V_2_address0),
    .ce0(y_V_2_ce0),
    .we0(y_V_2_we0),
    .d0(32'd0),
    .q0(y_V_2_q0),
    .address1(y_V_2_address1),
    .ce1(y_V_2_ce1),
    .we1(y_V_2_we1),
    .d1(grp_fu_1123_p3),
    .q1(y_V_2_q1)
);

kws_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32neOg_U219(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_431_p0),
    .din1(grp_fu_431_p1),
    .ce(grp_fu_431_ce),
    .dout(grp_fu_431_p2)
);

kws_fdiv_32ns_32nGfk #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fdiv_32ns_32nGfk_U220(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1123942400),
    .din1(reg_450),
    .ce(1'b1),
    .dout(grp_fu_435_p2)
);

kws_sitofp_32ns_3KfY #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_sitofp_32ns_3KfY_U221(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_440_p0),
    .ce(grp_fu_440_ce),
    .dout(grp_fu_440_p1)
);

kws_fptrunc_64ns_Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kws_fptrunc_64ns_Aem_U222(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_444_p0),
    .ce(grp_fu_444_ce),
    .dout(grp_fu_444_p1)
);

kws_fpext_32ns_64Bew #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kws_fpext_32ns_64Bew_U223(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_456),
    .ce(grp_fu_447_ce),
    .dout(grp_fu_447_p1)
);

kws_mac_muladd_8sLf8 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_mac_muladd_8sLf8_U224(
    .din0(x_V_3_load_reg_1212),
    .din1(select_ln49_2_reg_1191_pp2_iter1_reg),
    .din2(y_V_2_q0),
    .dout(grp_fu_1123_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state7)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state11))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state45) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((dw12pw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state45)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state45);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter14 <= ap_enable_reg_pp4_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter15 <= ap_enable_reg_pp4_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter16 <= ap_enable_reg_pp4_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter17 <= ap_enable_reg_pp4_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter18 <= ap_enable_reg_pp4_iter17;
        end else if (((dw12pw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
            ap_enable_reg_pp4_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_fu_534_p2 == 1'd0))) begin
        indvar_flatten_reg_352 <= add_ln49_fu_540_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_352 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_reg_1177 == 1'd0))) begin
        kw_0_reg_363 <= select_ln49_1_reg_1186;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kw_0_reg_363 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_fu_534_p2 == 1'd0))) begin
        ow2_0_reg_374 <= ow_1_fu_621_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ow2_0_reg_374 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ow3_0_reg_409 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln56_fu_633_p2 == 1'd0))) begin
        ow3_0_reg_409 <= ow_2_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_fu_714_p2 == 1'd0))) begin
        ow4_0_reg_420 <= ow_3_fu_720_p2;
    end else if (((dw12pw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        ow4_0_reg_420 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ow_0_reg_341 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln43_fu_480_p2 == 1'd0))) begin
        ow_0_reg_341 <= ow_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_0129_0_reg_385 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln56_reg_1217 == 1'd0))) begin
        p_0129_0_reg_385 <= select_ln59_fu_656_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_0137_0_reg_397 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln56_reg_1217 == 1'd0))) begin
        p_0137_0_reg_397 <= tmp_max_V_fu_670_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_1142 == 1'd0))) begin
        w_0_reg_329 <= w_reg_1146;
    end else if ((~((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_329 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter15_reg == 1'd0))) begin
        and_ln284_reg_1360 <= and_ln284_fu_997_p2;
        and_ln295_reg_1370 <= and_ln295_fu_1029_p2;
        icmp_ln278_reg_1339 <= icmp_ln278_fu_919_p2;
        icmp_ln282_reg_1345 <= icmp_ln282_fu_935_p2;
        icmp_ln285_reg_1350 <= icmp_ln285_fu_947_p2;
        p_Result_79_reg_1328 <= reg_V_fu_874_p1[32'd31];
        reg_V_reg_1323 <= reg_V_fu_874_p1;
        select_ln285_reg_1365 <= select_ln285_fu_1009_p3;
        sh_amt_12_reg_1355 <= sh_amt_12_fu_953_p2;
        trunc_ln283_reg_1333 <= trunc_ln283_fu_907_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter12_reg == 1'd0))) begin
        bitcast_ln849_reg_1308 <= bitcast_ln849_fu_853_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln37_reg_1142 <= icmp_ln37_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln49_reg_1177 <= icmp_ln49_fu_534_p2;
        icmp_ln49_reg_1177_pp2_iter1_reg <= icmp_ln49_reg_1177;
        select_ln49_2_reg_1191_pp2_iter1_reg <= select_ln49_2_reg_1191;
        y_V_addr_4_reg_1201_pp2_iter1_reg <= y_V_addr_4_reg_1201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln56_reg_1217 <= icmp_ln56_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln75_reg_1252 <= icmp_ln75_fu_714_p2;
        icmp_ln75_reg_1252_pp4_iter1_reg <= icmp_ln75_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln75_reg_1252_pp4_iter10_reg <= icmp_ln75_reg_1252_pp4_iter9_reg;
        icmp_ln75_reg_1252_pp4_iter11_reg <= icmp_ln75_reg_1252_pp4_iter10_reg;
        icmp_ln75_reg_1252_pp4_iter12_reg <= icmp_ln75_reg_1252_pp4_iter11_reg;
        icmp_ln75_reg_1252_pp4_iter13_reg <= icmp_ln75_reg_1252_pp4_iter12_reg;
        icmp_ln75_reg_1252_pp4_iter14_reg <= icmp_ln75_reg_1252_pp4_iter13_reg;
        icmp_ln75_reg_1252_pp4_iter15_reg <= icmp_ln75_reg_1252_pp4_iter14_reg;
        icmp_ln75_reg_1252_pp4_iter16_reg <= icmp_ln75_reg_1252_pp4_iter15_reg;
        icmp_ln75_reg_1252_pp4_iter17_reg <= icmp_ln75_reg_1252_pp4_iter16_reg;
        icmp_ln75_reg_1252_pp4_iter2_reg <= icmp_ln75_reg_1252_pp4_iter1_reg;
        icmp_ln75_reg_1252_pp4_iter3_reg <= icmp_ln75_reg_1252_pp4_iter2_reg;
        icmp_ln75_reg_1252_pp4_iter4_reg <= icmp_ln75_reg_1252_pp4_iter3_reg;
        icmp_ln75_reg_1252_pp4_iter5_reg <= icmp_ln75_reg_1252_pp4_iter4_reg;
        icmp_ln75_reg_1252_pp4_iter6_reg <= icmp_ln75_reg_1252_pp4_iter5_reg;
        icmp_ln75_reg_1252_pp4_iter7_reg <= icmp_ln75_reg_1252_pp4_iter6_reg;
        icmp_ln75_reg_1252_pp4_iter8_reg <= icmp_ln75_reg_1252_pp4_iter7_reg;
        icmp_ln75_reg_1252_pp4_iter9_reg <= icmp_ln75_reg_1252_pp4_iter8_reg;
        icmp_ln849_4_reg_1288_pp4_iter13_reg <= icmp_ln849_4_reg_1288;
        icmp_ln849_reg_1282_pp4_iter13_reg <= icmp_ln849_reg_1282;
        p_Result_75_reg_1271_pp4_iter12_reg <= p_Result_75_reg_1271;
        x_assign_reg_1277_pp4_iter13_reg <= x_assign_reg_1277;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter11_reg == 1'd0))) begin
        icmp_ln849_4_reg_1288 <= icmp_ln849_4_fu_763_p2;
        icmp_ln849_reg_1282 <= icmp_ln849_fu_757_p2;
        trunc_ln368_reg_1303 <= trunc_ln368_fu_785_p1;
        x_assign_reg_1277 <= grp_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter16_reg == 1'd0))) begin
        outprepare_V_reg_1375 <= outprepare_V_fu_1116_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter14_reg == 1'd0))) begin
        outprepare_tmp_reg_1318 <= grp_fu_444_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter10_reg == 1'd0))) begin
        p_Result_75_reg_1271 <= bitcast_ln475_fu_731_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_enable_reg_pp4_iter6 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter5_reg == 1'd0)))) begin
        reg_450 <= grp_fu_440_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | ((ap_enable_reg_pp4_iter10 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter9_reg == 1'd0)))) begin
        reg_456 <= grp_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_fu_534_p2 == 1'd0))) begin
        select_ln49_1_reg_1186 <= select_ln49_1_fu_566_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_fu_534_p2 == 1'd0))) begin
        select_ln49_2_reg_1191 <= select_ln49_2_fu_597_p3;
        y_V_addr_4_reg_1201 <= zext_ln53_fu_616_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        select_ln67_reg_1241 <= select_ln67_fu_706_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        shrink_reg_1246 <= grp_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_126_reg_1137 <= data2dw1_scale_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_reg_1146 <= w_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_reg_1177 == 1'd0))) begin
        x_V_3_load_reg_1212 <= x_V_3_1_q0;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_463_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln49_fu_534_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_633_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_714_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state45 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state45 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter17 == 1'b0) & (ap_enable_reg_pp4_iter16 == 1'b0) & (ap_enable_reg_pp4_iter15 == 1'b0) & (ap_enable_reg_pp4_iter14 == 1'b0) & (ap_enable_reg_pp4_iter13 == 1'b0) & (ap_enable_reg_pp4_iter12 == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b0) & (ap_enable_reg_pp4_iter9 == 1'b0) & (ap_enable_reg_pp4_iter8 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter10 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter18 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_reg_1177 == 1'd0))) begin
        ap_phi_mux_kw_0_phi_fu_367_p4 = select_ln49_1_reg_1186;
    end else begin
        ap_phi_mux_kw_0_phi_fu_367_p4 = kw_0_reg_363;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_1142 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_w_0_phi_fu_333_p4 = w_reg_1146;
    end else begin
        ap_phi_mux_w_0_phi_fu_333_p4 = w_0_reg_329;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data2dw1_scale_V_blk_n = data2dw1_scale_V_empty_n;
    end else begin
        data2dw1_scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data2dw1_scale_V_read = 1'b1;
    end else begin
        data2dw1_scale_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        dw12pw1_scale_V_blk_n = dw12pw1_scale_V_full_n;
    end else begin
        dw12pw1_scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((dw12pw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        dw12pw1_scale_V_write = 1'b1;
    end else begin
        dw12pw1_scale_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state42) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        grp_fu_431_ce = 1'b1;
    end else begin
        grp_fu_431_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_431_p0 = reg_450;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_431_p0 = reg_456;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_431_p0 = shrink_reg_1246;
    end else begin
        grp_fu_431_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_431_p1 = shrink_reg_1246;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_431_p1 = tmp_126_reg_1137;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_431_p1 = dw_weights_scale;
    end else begin
        grp_fu_431_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        grp_fu_440_ce = 1'b1;
    end else begin
        grp_fu_440_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_440_p0 = y_V_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_440_p0 = select_ln67_reg_1241;
    end else begin
        grp_fu_440_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        grp_fu_444_ce = 1'b1;
    end else begin
        grp_fu_444_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        grp_fu_447_ce = 1'b1;
    end else begin
        grp_fu_447_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_1142 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_stream_V_V_blk_n = in_stream_V_V_empty_n;
    end else begin
        in_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_1142 == 1'd0))) begin
        in_stream_V_V_read = 1'b1;
    end else begin
        in_stream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter12 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        mask_table2_ce0 = 1'b1;
    end else begin
        mask_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter12 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        one_half_table3_ce0 = 1'b1;
    end else begin
        one_half_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter18 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (icmp_ln75_reg_1252_pp4_iter17_reg == 1'd0))) begin
        out_stream_V_V_blk_n = out_stream_V_V_full_n;
    end else begin
        out_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter18 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln75_reg_1252_pp4_iter17_reg == 1'd0))) begin
        out_stream_V_V_write = 1'b1;
    end else begin
        out_stream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_V_3_1_address0 = zext_ln52_fu_611_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        x_V_3_1_address0 = zext_ln40_fu_475_p1;
    end else begin
        x_V_3_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        x_V_3_1_ce0 = 1'b1;
    end else begin
        x_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_1142 == 1'd0))) begin
        x_V_3_1_we0 = 1'b1;
    end else begin
        x_V_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        y_V_2_address0 = zext_ln77_fu_726_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_V_2_address0 = y_V_addr_4_reg_1201;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_V_2_address0 = zext_ln45_fu_492_p1;
    end else begin
        y_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        y_V_2_address1 = zext_ln59_fu_645_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        y_V_2_address1 = y_V_addr_4_reg_1201_pp2_iter1_reg;
    end else begin
        y_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        y_V_2_ce0 = 1'b1;
    end else begin
        y_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        y_V_2_ce1 = 1'b1;
    end else begin
        y_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln43_fu_480_p2 == 1'd0))) begin
        y_V_2_we0 = 1'b1;
    end else begin
        y_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln49_reg_1177_pp2_iter1_reg == 1'd0))) begin
        y_V_2_we1 = 1'b1;
    end else begin
        y_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln37_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln37_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln43_fu_480_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln49_fu_534_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln49_fu_534_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln56_fu_633_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln56_fu_633_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((dw12pw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln75_fu_714_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((ap_enable_reg_pp4_iter17 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter18 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln75_fu_714_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((ap_enable_reg_pp4_iter17 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter18 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_540_p2 = (indvar_flatten_reg_352 + 5'd1);

assign add_ln52_fu_605_p2 = (zext_ln49_fu_574_p1 + select_ln49_fu_558_p3);

assign and_ln282_fu_1098_p2 = (xor_ln278_fu_1093_p2 & icmp_ln282_reg_1345);

assign and_ln284_fu_997_p2 = (xor_ln282_fu_991_p2 & icmp_ln284_fu_941_p2);

assign and_ln285_12_fu_1080_p2 = (xor_ln285_fu_1075_p2 & and_ln284_reg_1360);

assign and_ln285_fu_1003_p2 = (icmp_ln285_fu_947_p2 & and_ln284_fu_997_p2);

assign and_ln295_fu_1029_p2 = (xor_ln284_fu_1023_p2 & icmp_ln295_fu_969_p2);

assign and_ln849_fu_862_p2 = (xor_ln849_fu_857_p2 & icmp_ln849_4_reg_1288_pp4_iter13_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd41];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1142 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1142 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((out_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp4_iter18 == 1'b1) & (icmp_ln75_reg_1252_pp4_iter17_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((out_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp4_iter18 == 1'b1) & (icmp_ln75_reg_1252_pp4_iter17_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((out_stream_V_V_full_n == 1'b0) & (ap_enable_reg_pp4_iter18 == 1'b1) & (icmp_ln75_reg_1252_pp4_iter17_reg == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((data2dw1_scale_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state11_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((in_stream_V_V_empty_n == 1'b0) & (icmp_ln37_reg_1142 == 1'd0));
end

assign ap_block_state45_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp4_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp4_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp4_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp4_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp4_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp4_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp4_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63_pp4_stage0_iter18 = ((out_stream_V_V_full_n == 1'b0) & (icmp_ln75_reg_1252_pp4_iter17_reg == 1'd0));
end

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign bitcast_ln475_fu_731_p1 = reg_456;

assign bitcast_ln849_fu_853_p1 = select_ln849_fu_846_p3;

assign dw12pw1_scale_V_din = reg_456;

assign exp_V_fu_899_p1 = p_Result_s_fu_889_p4;

assign grp_fu_444_p0 = ((and_ln849_fu_862_p2[0:0] === 1'b1) ? x_assign_reg_1277_pp4_iter13_reg : bitcast_ln849_reg_1308);

assign icmp_ln278_fu_919_p2 = ((trunc_ln262_fu_877_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_935_p2 = ((p_Result_s_fu_889_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_941_p2 = (($signed(sh_amt_fu_925_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_947_p2 = (($signed(sh_amt_fu_925_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_969_p2 = (($signed(tmp_124_fu_959_p4) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_463_p2 = ((ap_phi_mux_w_0_phi_fu_333_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_480_p2 = ((ow_0_reg_341 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_534_p2 = ((indvar_flatten_reg_352 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_552_p2 = ((ow2_0_reg_374 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_633_p2 = ((ow3_0_reg_409 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_714_p2 = ((ow4_0_reg_420 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln7_4_fu_521_p2 = ((ap_phi_mux_kw_0_phi_fu_367_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_5_fu_578_p2 = ((kw_fu_546_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_509_p2 = ((ap_phi_mux_kw_0_phi_fu_367_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln849_4_fu_763_p2 = ((tmp_V_19_fu_747_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln849_fu_757_p2 = ((tmp_V_19_fu_747_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_664_p2 = (($signed(y_V_2_q1) < $signed(p_0137_0_reg_397)) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_650_p2 = (($signed(y_V_2_q1) > $signed(p_0129_0_reg_385)) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_700_p2 = (($signed(p_0129_0_reg_385) > $signed(select_ln65_fu_692_p3)) ? 1'b1 : 1'b0);

assign index_V_fu_769_p4 = {{p_Val2_s_fu_743_p1[57:52]}};

assign kw_fu_546_p2 = (ap_phi_mux_kw_0_phi_fu_367_p4 + 2'd1);

assign lshr_ln286_fu_975_p2 = tmp_105_fu_911_p3 >> sext_ln281_fu_931_p1;

assign mask_table2_address0 = zext_ln498_fu_779_p1;

assign one_half_table3_address0 = zext_ln498_fu_779_p1;

assign or_ln282_fu_985_p2 = (icmp_ln282_fu_935_p2 | icmp_ln278_fu_919_p2);

assign or_ln284_fu_1017_p2 = (or_ln282_fu_985_p2 | icmp_ln284_fu_941_p2);

assign out_stream_V_V_din = outprepare_V_reg_1375;

assign outprepare_V_fu_1116_p3 = ((p_Result_79_reg_1328[0:0] === 1'b1) ? sub_ln461_fu_1110_p2 : select_ln282_fu_1103_p3);

assign ow_1_fu_621_p2 = (select_ln49_fu_558_p3 + 4'd1);

assign ow_2_fu_639_p2 = (ow3_0_reg_409 + 4'd1);

assign ow_3_fu_720_p2 = (ow4_0_reg_420 + 4'd1);

assign ow_fu_486_p2 = (ow_0_reg_341 + 4'd1);

assign p_Result_76_fu_789_p3 = {{p_Result_75_reg_1271_pp4_iter12_reg}, {63'd0}};

assign p_Result_77_fu_800_p3 = {{p_Result_75_reg_1271_pp4_iter12_reg}, {trunc_ln368_reg_1303}};

assign p_Result_78_fu_838_p3 = {{tmp_106_fu_828_p4}, {xs_sig_V_fu_822_p2}};

assign p_Result_s_fu_889_p4 = {{reg_V_fu_874_p1[30:23]}};

assign p_Val2_41_fu_806_p2 = (p_Result_77_fu_800_p3 + zext_ln209_fu_796_p1);

assign p_Val2_s_fu_743_p1 = grp_fu_447_p1;

assign reg_V_fu_874_p1 = outprepare_tmp_reg_1318;

assign select_ln278_fu_1068_p3 = ((icmp_ln278_reg_1339[0:0] === 1'b1) ? 8'd0 : select_ln295_fu_1062_p3);

assign select_ln282_fu_1103_p3 = ((and_ln282_fu_1098_p2[0:0] === 1'b1) ? trunc_ln283_reg_1333 : select_ln285_12_fu_1085_p3);

assign select_ln285_12_fu_1085_p3 = ((and_ln285_12_fu_1080_p2[0:0] === 1'b1) ? select_ln288_fu_1045_p3 : select_ln278_fu_1068_p3);

assign select_ln285_fu_1009_p3 = ((and_ln285_fu_1003_p2[0:0] === 1'b1) ? trunc_ln286_fu_981_p1 : 8'd0);

assign select_ln288_fu_1045_p3 = ((tmp_125_fu_1038_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln295_fu_1062_p3 = ((and_ln295_reg_1370[0:0] === 1'b1) ? shl_ln297_fu_1057_p2 : select_ln285_reg_1365);

assign select_ln49_1_fu_566_p3 = ((icmp_ln50_fu_552_p2[0:0] === 1'b1) ? kw_fu_546_p2 : ap_phi_mux_kw_0_phi_fu_367_p4);

assign select_ln49_2_fu_597_p3 = ((icmp_ln50_fu_552_p2[0:0] === 1'b1) ? select_ln7_3_fu_590_p3 : select_ln7_1_fu_527_p3);

assign select_ln49_fu_558_p3 = ((icmp_ln50_fu_552_p2[0:0] === 1'b1) ? 4'd0 : ow2_0_reg_374);

assign select_ln59_fu_656_p3 = ((icmp_ln895_1_fu_650_p2[0:0] === 1'b1) ? y_V_2_q1 : p_0129_0_reg_385);

assign select_ln65_fu_692_p3 = ((tmp_fu_678_p3[0:0] === 1'b1) ? tmp_min_V_fu_686_p2 : p_0137_0_reg_397);

assign select_ln67_fu_706_p3 = ((icmp_ln895_fu_700_p2[0:0] === 1'b1) ? p_0129_0_reg_385 : select_ln65_fu_692_p3);

assign select_ln7_1_fu_527_p3 = ((icmp_ln7_4_fu_521_p2[0:0] === 1'b1) ? dw_weight1_V_1 : select_ln7_fu_515_p3);

assign select_ln7_2_fu_584_p3 = ((icmp_ln7_5_fu_578_p2[0:0] === 1'b1) ? dw_weight1_V_0 : dw_weight1_V_2);

assign select_ln7_3_fu_590_p3 = ((icmp_ln7_fu_509_p2[0:0] === 1'b1) ? dw_weight1_V_1 : select_ln7_2_fu_584_p3);

assign select_ln7_fu_515_p3 = ((icmp_ln7_fu_509_p2[0:0] === 1'b1) ? dw_weight1_V_0 : dw_weight1_V_2);

assign select_ln849_fu_846_p3 = ((icmp_ln849_reg_1282[0:0] === 1'b1) ? p_Result_76_fu_789_p3 : p_Result_78_fu_838_p3);

assign sext_ln281_fu_931_p1 = sh_amt_fu_925_p2;

assign sext_ln294_fu_1035_p1 = sh_amt_12_reg_1355;

assign sext_ln294cast_fu_1053_p1 = sext_ln294_fu_1035_p1[7:0];

assign sh_amt_12_fu_953_p2 = ($signed(9'd0) - $signed(sh_amt_fu_925_p2));

assign sh_amt_fu_925_p2 = (9'd150 - exp_V_fu_899_p1);

assign shl_ln297_fu_1057_p2 = trunc_ln283_reg_1333 << sext_ln294cast_fu_1053_p1;

assign sub_ln461_fu_1110_p2 = (8'd0 - select_ln282_fu_1103_p3);

assign tmp_105_fu_911_p3 = {{1'd1}, {trunc_ln270_fu_903_p1}};

assign tmp_106_fu_828_p4 = {{p_Val2_41_fu_806_p2[63:52]}};

assign tmp_124_fu_959_p4 = {{sh_amt_12_fu_953_p2[8:3]}};

assign tmp_125_fu_1038_p3 = reg_V_reg_1323[32'd31];

assign tmp_V_19_fu_747_p4 = {{p_Val2_s_fu_743_p1[62:52]}};

assign tmp_V_20_fu_812_p1 = p_Val2_41_fu_806_p2[51:0];

assign tmp_fu_678_p3 = p_0137_0_reg_397[32'd31];

assign tmp_max_V_fu_670_p3 = ((icmp_ln887_fu_664_p2[0:0] === 1'b1) ? y_V_2_q1 : p_0137_0_reg_397);

assign tmp_min_V_fu_686_p2 = (32'd0 - p_0137_0_reg_397);

assign trunc_ln262_fu_877_p1 = reg_V_fu_874_p1[30:0];

assign trunc_ln270_fu_903_p1 = reg_V_fu_874_p1[22:0];

assign trunc_ln283_fu_907_p1 = reg_V_fu_874_p1[7:0];

assign trunc_ln286_fu_981_p1 = lshr_ln286_fu_975_p2[7:0];

assign trunc_ln368_fu_785_p1 = p_Val2_s_fu_743_p1[62:0];

assign w_fu_469_p2 = (ap_phi_mux_w_0_phi_fu_333_p4 + 4'd1);

assign xor_ln1309_fu_816_p2 = (mask_table2_q0 ^ 52'd4503599627370495);

assign xor_ln278_fu_1093_p2 = (icmp_ln278_reg_1339 ^ 1'd1);

assign xor_ln282_fu_991_p2 = (or_ln282_fu_985_p2 ^ 1'd1);

assign xor_ln284_fu_1023_p2 = (or_ln284_fu_1017_p2 ^ 1'd1);

assign xor_ln285_fu_1075_p2 = (icmp_ln285_reg_1350 ^ 1'd1);

assign xor_ln849_fu_857_p2 = (icmp_ln849_reg_1282_pp4_iter13_reg ^ 1'd1);

assign xs_sig_V_fu_822_p2 = (xor_ln1309_fu_816_p2 & tmp_V_20_fu_812_p1);

assign zext_ln209_fu_796_p1 = one_half_table3_q0;

assign zext_ln40_fu_475_p1 = w_0_reg_329;

assign zext_ln45_fu_492_p1 = ow_0_reg_341;

assign zext_ln498_fu_779_p1 = index_V_fu_769_p4;

assign zext_ln49_fu_574_p1 = select_ln49_1_fu_566_p3;

assign zext_ln52_fu_611_p1 = add_ln52_fu_605_p2;

assign zext_ln53_fu_616_p1 = select_ln49_fu_558_p3;

assign zext_ln59_fu_645_p1 = ow3_0_reg_409;

assign zext_ln77_fu_726_p1 = ow4_0_reg_420;

endmodule //dw_layer1
