// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quant_layer_10u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data2dw1_V_dout,
        data2dw1_V_empty_n,
        data2dw1_V_read,
        data2dw1_quant_V_V_din,
        data2dw1_quant_V_V_full_n,
        data2dw1_quant_V_V_write,
        data2dw1_scale_V_din,
        data2dw1_scale_V_full_n,
        data2dw1_scale_V_write
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data2dw1_V_dout;
input   data2dw1_V_empty_n;
output   data2dw1_V_read;
output  [7:0] data2dw1_quant_V_V_din;
input   data2dw1_quant_V_V_full_n;
output   data2dw1_quant_V_V_write;
output  [31:0] data2dw1_scale_V_din;
input   data2dw1_scale_V_full_n;
output   data2dw1_scale_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data2dw1_V_read;
reg data2dw1_quant_V_V_write;
reg data2dw1_scale_V_write;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data2dw1_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_225_p2;
reg    data2dw1_quant_V_V_blk_n;
wire    ap_CS_fsm_state34;
reg    data2dw1_scale_V_blk_n;
wire    ap_CS_fsm_state26;
wire   [3:0] i_fu_231_p2;
reg   [3:0] i_reg_811;
reg    ap_block_state2;
reg   [31:0] tmp_23_reg_816;
wire   [0:0] or_ln28_fu_289_p2;
reg   [0:0] or_ln28_reg_824;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln28_1_fu_319_p2;
reg   [0:0] and_ln28_1_reg_829;
wire   [31:0] min_data_2_fu_325_p3;
reg   [31:0] min_data_2_reg_835;
wire    ap_CS_fsm_state5;
wire   [31:0] max_data_2_fu_385_p3;
wire    ap_CS_fsm_state6;
wire   [0:0] grp_fu_216_p2;
reg   [0:0] tmp_2_reg_845;
wire    ap_CS_fsm_state7;
wire   [31:0] select_ln39_fu_443_p3;
reg   [31:0] select_ln39_reg_850;
wire    ap_CS_fsm_state8;
wire   [31:0] select_ln44_fu_535_p3;
reg   [31:0] select_ln44_reg_857;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] quant_scale_reg_862;
wire    ap_CS_fsm_state25;
wire   [3:0] i_25_fu_548_p2;
reg   [3:0] i_25_reg_871;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln55_fu_542_p2;
wire   [31:0] tmp_data_q0;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] val_assign_reg_886;
wire    ap_CS_fsm_state31;
wire   [31:0] reg_V_fu_559_p1;
reg   [31:0] reg_V_reg_891;
wire    ap_CS_fsm_state32;
reg   [0:0] p_Result_2_reg_896;
wire   [7:0] trunc_ln283_fu_592_p1;
reg   [7:0] trunc_ln283_reg_901;
wire   [0:0] icmp_ln278_fu_604_p2;
reg   [0:0] icmp_ln278_reg_907;
wire   [0:0] icmp_ln282_fu_620_p2;
reg   [0:0] icmp_ln282_reg_913;
wire   [0:0] icmp_ln285_fu_632_p2;
reg   [0:0] icmp_ln285_reg_918;
wire  signed [8:0] sh_amt_1_fu_638_p2;
reg  signed [8:0] sh_amt_1_reg_923;
wire   [0:0] and_ln284_fu_682_p2;
reg   [0:0] and_ln284_reg_928;
wire   [7:0] select_ln285_fu_694_p3;
reg   [7:0] select_ln285_reg_933;
wire   [0:0] and_ln295_fu_714_p2;
reg   [0:0] and_ln295_reg_938;
wire   [7:0] quant_data_V_fu_801_p3;
reg   [7:0] quant_data_V_reg_943;
wire    ap_CS_fsm_state33;
reg   [3:0] tmp_data_address0;
reg    tmp_data_ce0;
reg    tmp_data_we0;
reg   [31:0] max_data_0_reg_160;
reg   [31:0] min_data_0_reg_172;
reg   [3:0] i_0_reg_184;
reg   [3:0] i1_0_reg_195;
wire   [63:0] zext_ln36_fu_237_p1;
wire   [63:0] zext_ln56_fu_554_p1;
wire    ap_CS_fsm_state10;
reg   [31:0] grp_fu_216_p0;
reg   [31:0] grp_fu_216_p1;
wire    ap_CS_fsm_state3;
wire   [31:0] bitcast_ln28_fu_242_p1;
wire   [31:0] bitcast_ln28_1_fu_259_p1;
wire   [7:0] tmp_8_fu_245_p4;
wire   [22:0] trunc_ln28_fu_255_p1;
wire   [0:0] icmp_ln28_1_fu_283_p2;
wire   [0:0] icmp_ln28_fu_277_p2;
wire   [7:0] tmp_9_fu_263_p4;
wire   [22:0] trunc_ln28_1_fu_273_p1;
wire   [0:0] icmp_ln28_3_fu_301_p2;
wire   [0:0] icmp_ln28_2_fu_295_p2;
wire   [0:0] or_ln28_1_fu_307_p2;
wire   [0:0] and_ln28_fu_313_p2;
wire   [31:0] bitcast_ln32_fu_331_p1;
wire   [7:0] tmp_12_fu_335_p4;
wire   [22:0] trunc_ln32_fu_345_p1;
wire   [0:0] icmp_ln32_1_fu_355_p2;
wire   [0:0] icmp_ln32_fu_349_p2;
wire   [0:0] or_ln32_fu_361_p2;
wire   [0:0] and_ln32_fu_367_p2;
wire   [0:0] and_ln32_1_fu_372_p2;
wire   [31:0] max_data_fu_378_p3;
wire   [31:0] bitcast_ln39_fu_392_p1;
wire   [7:0] tmp_fu_396_p4;
wire   [22:0] trunc_ln39_fu_406_p1;
wire   [0:0] icmp_ln39_1_fu_416_p2;
wire   [0:0] icmp_ln39_fu_410_p2;
wire   [0:0] or_ln39_fu_422_p2;
wire   [31:0] xor_ln40_fu_433_p2;
wire   [0:0] and_ln39_fu_428_p2;
wire   [31:0] min_data_fu_439_p1;
wire   [31:0] bitcast_ln44_fu_452_p1;
wire   [31:0] bitcast_ln44_1_fu_470_p1;
wire   [7:0] tmp_4_fu_456_p4;
wire   [22:0] trunc_ln44_fu_466_p1;
wire   [0:0] icmp_ln44_1_fu_493_p2;
wire   [0:0] icmp_ln44_fu_487_p2;
wire   [7:0] tmp_5_fu_473_p4;
wire   [22:0] trunc_ln44_1_fu_483_p1;
wire   [0:0] icmp_ln44_3_fu_511_p2;
wire   [0:0] icmp_ln44_2_fu_505_p2;
wire   [0:0] or_ln44_fu_499_p2;
wire   [0:0] or_ln44_1_fu_517_p2;
wire   [0:0] and_ln44_fu_523_p2;
wire   [0:0] and_ln44_1_fu_529_p2;
wire   [7:0] p_Result_s_fu_574_p4;
wire   [22:0] trunc_ln270_fu_588_p1;
wire   [30:0] trunc_ln262_fu_562_p1;
wire   [8:0] exp_V_fu_584_p1;
wire  signed [8:0] sh_amt_fu_610_p2;
wire   [5:0] tmp_21_fu_644_p4;
wire   [23:0] tmp_s_fu_596_p3;
wire  signed [23:0] sext_ln281_fu_616_p1;
wire   [23:0] lshr_ln286_fu_660_p2;
wire   [0:0] or_ln282_fu_670_p2;
wire   [0:0] icmp_ln284_fu_626_p2;
wire   [0:0] xor_ln282_fu_676_p2;
wire   [0:0] and_ln285_fu_688_p2;
wire   [7:0] trunc_ln286_fu_666_p1;
wire   [0:0] or_ln284_fu_702_p2;
wire   [0:0] icmp_ln295_fu_654_p2;
wire   [0:0] xor_ln284_fu_708_p2;
wire   [0:0] tmp_22_fu_723_p3;
wire  signed [31:0] sext_ln294_fu_720_p1;
wire   [7:0] sext_ln294cast_fu_738_p1;
wire   [7:0] shl_ln297_fu_742_p2;
wire   [7:0] select_ln295_fu_747_p3;
wire   [0:0] xor_ln285_fu_760_p2;
wire   [0:0] and_ln285_1_fu_765_p2;
wire   [7:0] select_ln288_fu_730_p3;
wire   [7:0] select_ln278_fu_753_p3;
wire   [0:0] xor_ln278_fu_778_p2;
wire   [0:0] and_ln282_fu_783_p2;
wire   [7:0] select_ln285_1_fu_770_p3;
wire   [7:0] select_ln282_fu_788_p3;
wire   [7:0] sub_ln461_fu_795_p2;
reg    grp_fu_216_ce;
reg   [4:0] grp_fu_216_opcode;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

quant_layer_10u_sFfa #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
tmp_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_data_address0),
    .ce0(tmp_data_ce0),
    .we0(tmp_data_we0),
    .d0(data2dw1_V_dout),
    .q0(tmp_data_q0)
);

kws_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32neOg_U210(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(quant_scale_reg_862),
    .din1(tmp_data_q0),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

kws_fdiv_32ns_32nGfk #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fdiv_32ns_32nGfk_U211(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1123942400),
    .din1(select_ln44_reg_857),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

kws_fcmp_32ns_32nHfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kws_fcmp_32ns_32nHfu_U212(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_216_p0),
    .din1(grp_fu_216_p1),
    .ce(grp_fu_216_ce),
    .opcode(grp_fu_216_opcode),
    .dout(grp_fu_216_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((data2dw1_quant_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        i1_0_reg_195 <= i_25_reg_871;
    end else if (((data2dw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        i1_0_reg_195 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_184 <= i_reg_811;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_data_0_reg_160 <= min_data_2_reg_835;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_data_0_reg_160 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        min_data_0_reg_172 <= max_data_2_fu_385_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        min_data_0_reg_172 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        and_ln284_reg_928 <= and_ln284_fu_682_p2;
        and_ln295_reg_938 <= and_ln295_fu_714_p2;
        icmp_ln278_reg_907 <= icmp_ln278_fu_604_p2;
        icmp_ln282_reg_913 <= icmp_ln282_fu_620_p2;
        icmp_ln285_reg_918 <= icmp_ln285_fu_632_p2;
        p_Result_2_reg_896 <= reg_V_fu_559_p1[32'd31];
        reg_V_reg_891 <= reg_V_fu_559_p1;
        select_ln285_reg_933 <= select_ln285_fu_694_p3;
        sh_amt_1_reg_923 <= sh_amt_1_fu_638_p2;
        trunc_ln283_reg_901 <= trunc_ln283_fu_592_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln28_1_reg_829 <= and_ln28_1_fu_319_p2;
        or_ln28_reg_824 <= or_ln28_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_25_reg_871 <= i_25_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_811 <= i_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        min_data_2_reg_835 <= min_data_2_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        quant_data_V_reg_943 <= quant_data_V_fu_801_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        quant_scale_reg_862 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln39_reg_850 <= select_ln39_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln44_reg_857 <= select_ln44_fu_535_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (icmp_ln26_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_23_reg_816 <= data2dw1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_2_reg_845 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        val_assign_reg_886 <= grp_fu_206_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state27) & (icmp_ln55_fu_542_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln55_fu_542_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data2dw1_V_blk_n = data2dw1_V_empty_n;
    end else begin
        data2dw1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (icmp_ln26_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data2dw1_V_read = 1'b1;
    end else begin
        data2dw1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        data2dw1_quant_V_V_blk_n = data2dw1_quant_V_V_full_n;
    end else begin
        data2dw1_quant_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data2dw1_quant_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        data2dw1_quant_V_V_write = 1'b1;
    end else begin
        data2dw1_quant_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        data2dw1_scale_V_blk_n = data2dw1_scale_V_full_n;
    end else begin
        data2dw1_scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data2dw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        data2dw1_scale_V_write = 1'b1;
    end else begin
        data2dw1_scale_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_216_ce = 1'b1;
    end else begin
        grp_fu_216_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_216_opcode = 5'd2;
    end else if (((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (icmp_ln26_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'd0 == and_ln28_1_reg_829) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_216_opcode = 5'd4;
    end else begin
        grp_fu_216_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_216_p0 = max_data_0_reg_160;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_216_p0 = tmp_23_reg_816;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_216_p0 = min_data_0_reg_172;
    end else begin
        grp_fu_216_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_216_p1 = select_ln39_fu_443_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_216_p1 = min_data_0_reg_172;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_216_p1 = max_data_0_reg_160;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_216_p1 = 32'd0;
    end else begin
        grp_fu_216_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_data_address0 = zext_ln56_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_data_address0 = zext_ln36_fu_237_p1;
    end else begin
        tmp_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        tmp_data_ce0 = 1'b1;
    end else begin
        tmp_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (icmp_ln26_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_we0 = 1'b1;
    end else begin
        tmp_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (icmp_ln26_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0)) & (icmp_ln26_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((data2dw1_scale_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln55_fu_542_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((data2dw1_quant_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln282_fu_783_p2 = (xor_ln278_fu_778_p2 & icmp_ln282_reg_913);

assign and_ln284_fu_682_p2 = (xor_ln282_fu_676_p2 & icmp_ln284_fu_626_p2);

assign and_ln285_1_fu_765_p2 = (xor_ln285_fu_760_p2 & and_ln284_reg_928);

assign and_ln285_fu_688_p2 = (icmp_ln285_fu_632_p2 & and_ln284_fu_682_p2);

assign and_ln28_1_fu_319_p2 = (grp_fu_216_p2 & and_ln28_fu_313_p2);

assign and_ln28_fu_313_p2 = (or_ln28_fu_289_p2 & or_ln28_1_fu_307_p2);

assign and_ln295_fu_714_p2 = (xor_ln284_fu_708_p2 & icmp_ln295_fu_654_p2);

assign and_ln32_1_fu_372_p2 = (grp_fu_216_p2 & and_ln32_fu_367_p2);

assign and_ln32_fu_367_p2 = (or_ln32_fu_361_p2 & or_ln28_reg_824);

assign and_ln39_fu_428_p2 = (tmp_2_reg_845 & or_ln39_fu_422_p2);

assign and_ln44_1_fu_529_p2 = (grp_fu_216_p2 & and_ln44_fu_523_p2);

assign and_ln44_fu_523_p2 = (or_ln44_fu_499_p2 & or_ln44_1_fu_517_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((icmp_ln26_fu_225_p2 == 1'd0) & (data2dw1_V_empty_n == 1'b0));
end

assign bitcast_ln28_1_fu_259_p1 = max_data_0_reg_160;

assign bitcast_ln28_fu_242_p1 = tmp_23_reg_816;

assign bitcast_ln32_fu_331_p1 = min_data_0_reg_172;

assign bitcast_ln39_fu_392_p1 = min_data_0_reg_172;

assign bitcast_ln44_1_fu_470_p1 = select_ln39_reg_850;

assign bitcast_ln44_fu_452_p1 = max_data_0_reg_160;

assign data2dw1_quant_V_V_din = quant_data_V_reg_943;

assign data2dw1_scale_V_din = quant_scale_reg_862;

assign exp_V_fu_584_p1 = p_Result_s_fu_574_p4;

assign i_25_fu_548_p2 = (i1_0_reg_195 + 4'd1);

assign i_fu_231_p2 = (i_0_reg_184 + 4'd1);

assign icmp_ln26_fu_225_p2 = ((i_0_reg_184 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_604_p2 = ((trunc_ln262_fu_562_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_620_p2 = ((p_Result_s_fu_574_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_626_p2 = (($signed(sh_amt_fu_610_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_632_p2 = (($signed(sh_amt_fu_610_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_283_p2 = ((trunc_ln28_fu_255_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_295_p2 = ((tmp_9_fu_263_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_301_p2 = ((trunc_ln28_1_fu_273_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_277_p2 = ((tmp_8_fu_245_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_654_p2 = (($signed(tmp_21_fu_644_p4) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_355_p2 = ((trunc_ln32_fu_345_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_349_p2 = ((tmp_12_fu_335_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_416_p2 = ((trunc_ln39_fu_406_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_410_p2 = ((tmp_fu_396_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_493_p2 = ((trunc_ln44_fu_466_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_505_p2 = ((tmp_5_fu_473_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_3_fu_511_p2 = ((trunc_ln44_1_fu_483_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_487_p2 = ((tmp_4_fu_456_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_542_p2 = ((i1_0_reg_195 == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln286_fu_660_p2 = tmp_s_fu_596_p3 >> sext_ln281_fu_616_p1;

assign max_data_2_fu_385_p3 = ((and_ln28_1_reg_829[0:0] === 1'b1) ? min_data_0_reg_172 : max_data_fu_378_p3);

assign max_data_fu_378_p3 = ((and_ln32_1_fu_372_p2[0:0] === 1'b1) ? tmp_23_reg_816 : min_data_0_reg_172);

assign min_data_2_fu_325_p3 = ((and_ln28_1_reg_829[0:0] === 1'b1) ? tmp_23_reg_816 : max_data_0_reg_160);

assign min_data_fu_439_p1 = xor_ln40_fu_433_p2;

assign or_ln282_fu_670_p2 = (icmp_ln282_fu_620_p2 | icmp_ln278_fu_604_p2);

assign or_ln284_fu_702_p2 = (or_ln282_fu_670_p2 | icmp_ln284_fu_626_p2);

assign or_ln28_1_fu_307_p2 = (icmp_ln28_3_fu_301_p2 | icmp_ln28_2_fu_295_p2);

assign or_ln28_fu_289_p2 = (icmp_ln28_fu_277_p2 | icmp_ln28_1_fu_283_p2);

assign or_ln32_fu_361_p2 = (icmp_ln32_fu_349_p2 | icmp_ln32_1_fu_355_p2);

assign or_ln39_fu_422_p2 = (icmp_ln39_fu_410_p2 | icmp_ln39_1_fu_416_p2);

assign or_ln44_1_fu_517_p2 = (icmp_ln44_3_fu_511_p2 | icmp_ln44_2_fu_505_p2);

assign or_ln44_fu_499_p2 = (icmp_ln44_fu_487_p2 | icmp_ln44_1_fu_493_p2);

assign p_Result_s_fu_574_p4 = {{reg_V_fu_559_p1[30:23]}};

assign quant_data_V_fu_801_p3 = ((p_Result_2_reg_896[0:0] === 1'b1) ? sub_ln461_fu_795_p2 : select_ln282_fu_788_p3);

assign reg_V_fu_559_p1 = val_assign_reg_886;

assign select_ln278_fu_753_p3 = ((icmp_ln278_reg_907[0:0] === 1'b1) ? 8'd0 : select_ln295_fu_747_p3);

assign select_ln282_fu_788_p3 = ((and_ln282_fu_783_p2[0:0] === 1'b1) ? trunc_ln283_reg_901 : select_ln285_1_fu_770_p3);

assign select_ln285_1_fu_770_p3 = ((and_ln285_1_fu_765_p2[0:0] === 1'b1) ? select_ln288_fu_730_p3 : select_ln278_fu_753_p3);

assign select_ln285_fu_694_p3 = ((and_ln285_fu_688_p2[0:0] === 1'b1) ? trunc_ln286_fu_666_p1 : 8'd0);

assign select_ln288_fu_730_p3 = ((tmp_22_fu_723_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln295_fu_747_p3 = ((and_ln295_reg_938[0:0] === 1'b1) ? shl_ln297_fu_742_p2 : select_ln285_reg_933);

assign select_ln39_fu_443_p3 = ((and_ln39_fu_428_p2[0:0] === 1'b1) ? min_data_fu_439_p1 : min_data_0_reg_172);

assign select_ln44_fu_535_p3 = ((and_ln44_1_fu_529_p2[0:0] === 1'b1) ? max_data_0_reg_160 : select_ln39_reg_850);

assign sext_ln281_fu_616_p1 = sh_amt_fu_610_p2;

assign sext_ln294_fu_720_p1 = sh_amt_1_reg_923;

assign sext_ln294cast_fu_738_p1 = sext_ln294_fu_720_p1[7:0];

assign sh_amt_1_fu_638_p2 = ($signed(9'd0) - $signed(sh_amt_fu_610_p2));

assign sh_amt_fu_610_p2 = (9'd150 - exp_V_fu_584_p1);

assign shl_ln297_fu_742_p2 = trunc_ln283_reg_901 << sext_ln294cast_fu_738_p1;

assign sub_ln461_fu_795_p2 = (8'd0 - select_ln282_fu_788_p3);

assign tmp_12_fu_335_p4 = {{bitcast_ln32_fu_331_p1[30:23]}};

assign tmp_21_fu_644_p4 = {{sh_amt_1_fu_638_p2[8:3]}};

assign tmp_22_fu_723_p3 = reg_V_reg_891[32'd31];

assign tmp_4_fu_456_p4 = {{bitcast_ln44_fu_452_p1[30:23]}};

assign tmp_5_fu_473_p4 = {{bitcast_ln44_1_fu_470_p1[30:23]}};

assign tmp_8_fu_245_p4 = {{bitcast_ln28_fu_242_p1[30:23]}};

assign tmp_9_fu_263_p4 = {{bitcast_ln28_1_fu_259_p1[30:23]}};

assign tmp_fu_396_p4 = {{bitcast_ln39_fu_392_p1[30:23]}};

assign tmp_s_fu_596_p3 = {{1'd1}, {trunc_ln270_fu_588_p1}};

assign trunc_ln262_fu_562_p1 = reg_V_fu_559_p1[30:0];

assign trunc_ln270_fu_588_p1 = reg_V_fu_559_p1[22:0];

assign trunc_ln283_fu_592_p1 = reg_V_fu_559_p1[7:0];

assign trunc_ln286_fu_666_p1 = lshr_ln286_fu_660_p2[7:0];

assign trunc_ln28_1_fu_273_p1 = bitcast_ln28_1_fu_259_p1[22:0];

assign trunc_ln28_fu_255_p1 = bitcast_ln28_fu_242_p1[22:0];

assign trunc_ln32_fu_345_p1 = bitcast_ln32_fu_331_p1[22:0];

assign trunc_ln39_fu_406_p1 = bitcast_ln39_fu_392_p1[22:0];

assign trunc_ln44_1_fu_483_p1 = bitcast_ln44_1_fu_470_p1[22:0];

assign trunc_ln44_fu_466_p1 = bitcast_ln44_fu_452_p1[22:0];

assign xor_ln278_fu_778_p2 = (icmp_ln278_reg_907 ^ 1'd1);

assign xor_ln282_fu_676_p2 = (or_ln282_fu_670_p2 ^ 1'd1);

assign xor_ln284_fu_708_p2 = (or_ln284_fu_702_p2 ^ 1'd1);

assign xor_ln285_fu_760_p2 = (icmp_ln285_reg_918 ^ 1'd1);

assign xor_ln40_fu_433_p2 = (bitcast_ln39_fu_392_p1 ^ 32'd2147483648);

assign zext_ln36_fu_237_p1 = i_0_reg_184;

assign zext_ln56_fu_554_p1 = i1_0_reg_195;

endmodule //quant_layer_10u_s
