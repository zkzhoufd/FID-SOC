// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mfcc_log (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fbank_out_0_address0,
        fbank_out_0_ce0,
        fbank_out_0_q0,
        fbank_out_0_address1,
        fbank_out_0_ce1,
        fbank_out_0_we1,
        fbank_out_0_d1,
        fbank_out_1_address0,
        fbank_out_1_ce0,
        fbank_out_1_q0,
        fbank_out_1_address1,
        fbank_out_1_ce1,
        fbank_out_1_we1,
        fbank_out_1_d1,
        fbank_out_2_address0,
        fbank_out_2_ce0,
        fbank_out_2_q0,
        fbank_out_2_address1,
        fbank_out_2_ce1,
        fbank_out_2_we1,
        fbank_out_2_d1,
        fbank_out_3_address0,
        fbank_out_3_ce0,
        fbank_out_3_q0,
        fbank_out_3_address1,
        fbank_out_3_ce1,
        fbank_out_3_we1,
        fbank_out_3_d1
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] fbank_out_0_address0;
output   fbank_out_0_ce0;
input  [31:0] fbank_out_0_q0;
output  [8:0] fbank_out_0_address1;
output   fbank_out_0_ce1;
output   fbank_out_0_we1;
output  [31:0] fbank_out_0_d1;
output  [8:0] fbank_out_1_address0;
output   fbank_out_1_ce0;
input  [31:0] fbank_out_1_q0;
output  [8:0] fbank_out_1_address1;
output   fbank_out_1_ce1;
output   fbank_out_1_we1;
output  [31:0] fbank_out_1_d1;
output  [8:0] fbank_out_2_address0;
output   fbank_out_2_ce0;
input  [31:0] fbank_out_2_q0;
output  [8:0] fbank_out_2_address1;
output   fbank_out_2_ce1;
output   fbank_out_2_we1;
output  [31:0] fbank_out_2_d1;
output  [8:0] fbank_out_3_address0;
output   fbank_out_3_ce0;
input  [31:0] fbank_out_3_q0;
output  [8:0] fbank_out_3_address1;
output   fbank_out_3_ce1;
output   fbank_out_3_we1;
output  [31:0] fbank_out_3_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fbank_out_0_ce0;
reg fbank_out_0_ce1;
reg fbank_out_0_we1;
reg fbank_out_1_ce0;
reg fbank_out_1_ce1;
reg fbank_out_1_we1;
reg fbank_out_2_ce0;
reg fbank_out_2_ce1;
reg fbank_out_2_we1;
reg fbank_out_3_ce0;
reg fbank_out_3_ce1;
reg fbank_out_3_we1;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_fu_196_p2;
reg   [5:0] i_reg_344;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln131_fu_226_p2;
reg   [9:0] add_ln131_reg_349;
wire   [0:0] icmp_ln127_fu_190_p2;
wire   [5:0] j_fu_238_p2;
reg   [5:0] j_reg_357;
wire    ap_CS_fsm_state3;
wire   [1:0] trunc_ln131_fu_244_p1;
reg   [1:0] trunc_ln131_reg_362;
wire   [0:0] icmp_ln129_fu_232_p2;
reg   [8:0] fbank_out_0_addr_reg_367;
reg   [8:0] fbank_out_1_addr_reg_373;
reg   [8:0] fbank_out_2_addr_reg_379;
reg   [8:0] fbank_out_3_addr_reg_385;
wire   [31:0] val_fu_278_p6;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_fu_177_p1;
reg   [63:0] tmp_reg_396;
wire    ap_CS_fsm_state5;
wire   [63:0] select_ln134_fu_334_p3;
reg   [63:0] select_ln134_reg_403;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_fu_185_p2;
reg   [63:0] tmp_s_reg_408;
wire    ap_CS_fsm_state38;
reg   [5:0] i_0_reg_148;
reg   [5:0] j_0_reg_159;
wire    ap_CS_fsm_state40;
wire   [63:0] zext_ln131_4_fu_267_p1;
wire   [31:0] grp_fu_170_p1;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire   [8:0] tmp_73_fu_202_p3;
wire   [6:0] tmp_74_fu_214_p3;
wire   [9:0] zext_ln131_2_fu_222_p1;
wire   [9:0] zext_ln131_fu_210_p1;
wire   [3:0] tmp_41_fu_248_p4;
wire   [9:0] zext_ln131_3_fu_258_p1;
wire   [9:0] add_ln131_1_fu_262_p2;
wire   [15:0] val_fu_278_p5;
wire   [63:0] bitcast_ln132_fu_293_p1;
wire   [10:0] tmp_277_fu_296_p4;
wire   [51:0] trunc_ln132_fu_306_p1;
wire   [0:0] icmp_ln132_1_fu_316_p2;
wire   [0:0] icmp_ln132_fu_310_p2;
wire   [0:0] or_ln132_fu_322_p2;
wire   [0:0] grp_fu_180_p2;
wire   [0:0] and_ln132_fu_328_p2;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

kws_fptrunc_64ns_Aem #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kws_fptrunc_64ns_Aem_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_408),
    .ce(1'b1),
    .dout(grp_fu_170_p1)
);

kws_fpext_32ns_64Bew #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kws_fpext_32ns_64Bew_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(val_fu_278_p6),
    .ce(1'b1),
    .dout(grp_fu_177_p1)
);

kws_dcmp_64ns_64nCeG #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
kws_dcmp_64ns_64nCeG_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_396),
    .din1(64'd4427486594234968593),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_180_p2)
);

kws_dlog_64ns_64nDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kws_dlog_64ns_64nDeQ_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(select_ln134_reg_403),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

kws_mux_416_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
kws_mux_416_32_1_1_U116(
    .din0(fbank_out_0_q0),
    .din1(fbank_out_1_q0),
    .din2(fbank_out_2_q0),
    .din3(fbank_out_3_q0),
    .din4(val_fu_278_p5),
    .dout(val_fu_278_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_232_p2 == 1'd1))) begin
        i_0_reg_148 <= i_reg_344;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_148 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        j_0_reg_159 <= j_reg_357;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln127_fu_190_p2 == 1'd0))) begin
        j_0_reg_159 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln127_fu_190_p2 == 1'd0))) begin
        add_ln131_reg_349[9 : 1] <= add_ln131_fu_226_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_232_p2 == 1'd0))) begin
        fbank_out_0_addr_reg_367 <= zext_ln131_4_fu_267_p1;
        fbank_out_1_addr_reg_373 <= zext_ln131_4_fu_267_p1;
        fbank_out_2_addr_reg_379 <= zext_ln131_4_fu_267_p1;
        fbank_out_3_addr_reg_385 <= zext_ln131_4_fu_267_p1;
        trunc_ln131_reg_362 <= trunc_ln131_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_344 <= i_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_357 <= j_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln134_reg_403 <= select_ln134_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_396 <= grp_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_s_reg_408 <= grp_fu_185_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln127_fu_190_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln127_fu_190_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fbank_out_0_ce0 = 1'b1;
    end else begin
        fbank_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        fbank_out_0_ce1 = 1'b1;
    end else begin
        fbank_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (trunc_ln131_reg_362 == 2'd0))) begin
        fbank_out_0_we1 = 1'b1;
    end else begin
        fbank_out_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fbank_out_1_ce0 = 1'b1;
    end else begin
        fbank_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        fbank_out_1_ce1 = 1'b1;
    end else begin
        fbank_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (trunc_ln131_reg_362 == 2'd1))) begin
        fbank_out_1_we1 = 1'b1;
    end else begin
        fbank_out_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fbank_out_2_ce0 = 1'b1;
    end else begin
        fbank_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        fbank_out_2_ce1 = 1'b1;
    end else begin
        fbank_out_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (trunc_ln131_reg_362 == 2'd2))) begin
        fbank_out_2_we1 = 1'b1;
    end else begin
        fbank_out_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fbank_out_3_ce0 = 1'b1;
    end else begin
        fbank_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        fbank_out_3_ce1 = 1'b1;
    end else begin
        fbank_out_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (trunc_ln131_reg_362 == 2'd3))) begin
        fbank_out_3_we1 = 1'b1;
    end else begin
        fbank_out_3_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln127_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_232_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_1_fu_262_p2 = (add_ln131_reg_349 + zext_ln131_3_fu_258_p1);

assign add_ln131_fu_226_p2 = (zext_ln131_2_fu_222_p1 + zext_ln131_fu_210_p1);

assign and_ln132_fu_328_p2 = (or_ln132_fu_322_p2 & grp_fu_180_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln132_fu_293_p1 = tmp_reg_396;

assign fbank_out_0_address0 = zext_ln131_4_fu_267_p1;

assign fbank_out_0_address1 = fbank_out_0_addr_reg_367;

assign fbank_out_0_d1 = grp_fu_170_p1;

assign fbank_out_1_address0 = zext_ln131_4_fu_267_p1;

assign fbank_out_1_address1 = fbank_out_1_addr_reg_373;

assign fbank_out_1_d1 = grp_fu_170_p1;

assign fbank_out_2_address0 = zext_ln131_4_fu_267_p1;

assign fbank_out_2_address1 = fbank_out_2_addr_reg_379;

assign fbank_out_2_d1 = grp_fu_170_p1;

assign fbank_out_3_address0 = zext_ln131_4_fu_267_p1;

assign fbank_out_3_address1 = fbank_out_3_addr_reg_385;

assign fbank_out_3_d1 = grp_fu_170_p1;

assign i_fu_196_p2 = (i_0_reg_148 + 6'd1);

assign icmp_ln127_fu_190_p2 = ((i_0_reg_148 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_232_p2 = ((j_0_reg_159 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln132_1_fu_316_p2 = ((trunc_ln132_fu_306_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_310_p2 = ((tmp_277_fu_296_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign j_fu_238_p2 = (j_0_reg_159 + 6'd1);

assign or_ln132_fu_322_p2 = (icmp_ln132_fu_310_p2 | icmp_ln132_1_fu_316_p2);

assign select_ln134_fu_334_p3 = ((and_ln132_fu_328_p2[0:0] === 1'b1) ? 64'd4427486594215182336 : tmp_reg_396);

assign tmp_277_fu_296_p4 = {{bitcast_ln132_fu_293_p1[62:52]}};

assign tmp_41_fu_248_p4 = {{j_0_reg_159[5:2]}};

assign tmp_73_fu_202_p3 = {{i_0_reg_148}, {3'd0}};

assign tmp_74_fu_214_p3 = {{i_0_reg_148}, {1'd0}};

assign trunc_ln131_fu_244_p1 = j_0_reg_159[1:0];

assign trunc_ln132_fu_306_p1 = bitcast_ln132_fu_293_p1[51:0];

assign val_fu_278_p5 = trunc_ln131_reg_362;

assign zext_ln131_2_fu_222_p1 = tmp_74_fu_214_p3;

assign zext_ln131_3_fu_258_p1 = tmp_41_fu_248_p4;

assign zext_ln131_4_fu_267_p1 = add_ln131_1_fu_262_p2;

assign zext_ln131_fu_210_p1 = tmp_73_fu_202_p3;

always @ (posedge ap_clk) begin
    add_ln131_reg_349[0] <= 1'b0;
end

endmodule //mfcc_log
