// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_64u_12u_1u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_V_V_dout,
        in_stream_V_V_empty_n,
        in_stream_V_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write,
        fc2final_scale_V_dout,
        fc2final_scale_V_empty_n,
        fc2final_scale_V_read,
        fc_weight2_scale,
        tmp_scale_fc,
        fc_bias2_V_address0,
        fc_bias2_V_ce0,
        fc_bias2_V_q0,
        fc_weights2_V_address0,
        fc_weights2_V_ce0,
        fc_weights2_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_pp0_stage0 = 14'd32;
parameter    ap_ST_fsm_state8 = 14'd64;
parameter    ap_ST_fsm_state9 = 14'd128;
parameter    ap_ST_fsm_state10 = 14'd256;
parameter    ap_ST_fsm_pp2_stage0 = 14'd512;
parameter    ap_ST_fsm_pp2_stage1 = 14'd1024;
parameter    ap_ST_fsm_state30 = 14'd2048;
parameter    ap_ST_fsm_pp3_stage0 = 14'd4096;
parameter    ap_ST_fsm_state55 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_stream_V_V_dout;
input   in_stream_V_V_empty_n;
output   in_stream_V_V_read;
output  [31:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;
input  [31:0] fc2final_scale_V_dout;
input   fc2final_scale_V_empty_n;
output   fc2final_scale_V_read;
input  [31:0] fc_weight2_scale;
input  [31:0] tmp_scale_fc;
output  [3:0] fc_bias2_V_address0;
output   fc_bias2_V_ce0;
input  [7:0] fc_bias2_V_q0;
output  [9:0] fc_weights2_V_address0;
output   fc_weights2_V_ce0;
input  [7:0] fc_weights2_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_V_read;
reg out_stream_V_write;
reg fc2final_scale_V_read;
reg fc_bias2_V_ce0;
reg fc_weights2_V_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] x_V_address0;
reg    x_V_ce0;
reg    x_V_we0;
wire   [7:0] x_V_q0;
reg   [3:0] y_V_address0;
reg    y_V_ce0;
reg    y_V_we0;
wire   [31:0] y_V_q0;
reg   [3:0] y_V_address1;
reg    y_V_ce1;
reg    y_V_we1;
reg   [31:0] y_V_d1;
reg    in_stream_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln37_reg_819;
reg    out_stream_V_blk_n;
reg    ap_enable_reg_pp3_iter23;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln56_reg_972;
reg   [0:0] icmp_ln56_reg_972_pp3_iter22_reg;
reg    fc2final_scale_V_blk_n;
reg   [6:0] i_0_reg_278;
reg   [9:0] indvar_flatten_reg_301;
reg   [3:0] om1_0_reg_312;
reg   [6:0] im_0_reg_323;
reg   [3:0] om2_0_reg_334;
wire   [31:0] grp_fu_363_p1;
reg   [31:0] reg_367;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter3;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state15_pp2_stage0_iter2;
wire    ap_block_state17_pp2_stage0_iter3;
wire    ap_block_state19_pp2_stage0_iter4;
wire    ap_block_state21_pp2_stage0_iter5;
wire    ap_block_state23_pp2_stage0_iter6;
wire    ap_block_state25_pp2_stage0_iter7;
wire    ap_block_state27_pp2_stage0_iter8;
wire    ap_block_state29_pp2_stage0_iter9;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln49_1_reg_873;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter2_reg;
wire    ap_block_state31_pp3_stage0_iter0;
wire    ap_block_state32_pp3_stage0_iter1;
wire    ap_block_state33_pp3_stage0_iter2;
wire    ap_block_state34_pp3_stage0_iter3;
wire    ap_block_state35_pp3_stage0_iter4;
wire    ap_block_state36_pp3_stage0_iter5;
wire    ap_block_state37_pp3_stage0_iter6;
wire    ap_block_state38_pp3_stage0_iter7;
wire    ap_block_state39_pp3_stage0_iter8;
wire    ap_block_state40_pp3_stage0_iter9;
wire    ap_block_state41_pp3_stage0_iter10;
wire    ap_block_state42_pp3_stage0_iter11;
wire    ap_block_state43_pp3_stage0_iter12;
wire    ap_block_state44_pp3_stage0_iter13;
wire    ap_block_state45_pp3_stage0_iter14;
wire    ap_block_state46_pp3_stage0_iter15;
wire    ap_block_state47_pp3_stage0_iter16;
wire    ap_block_state48_pp3_stage0_iter17;
wire    ap_block_state49_pp3_stage0_iter18;
wire    ap_block_state50_pp3_stage0_iter19;
wire    ap_block_state51_pp3_stage0_iter20;
wire    ap_block_state52_pp3_stage0_iter21;
wire    ap_block_state53_pp3_stage0_iter22;
reg    ap_block_state54_pp3_stage0_iter23;
reg    ap_block_pp3_stage0_11001;
reg    ap_enable_reg_pp3_iter6;
reg   [0:0] icmp_ln56_reg_972_pp3_iter5_reg;
reg   [31:0] tmp_117_reg_793;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] output_scale_reg_809;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_354_p2;
reg   [31:0] tmp_scale_1_reg_814;
wire   [0:0] icmp_ln37_fu_373_p2;
wire    ap_block_state6_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] i_fu_379_p2;
reg   [6:0] i_reg_823;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] om_fu_396_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln48_fu_407_p2;
reg   [0:0] icmp_ln48_reg_836;
reg   [0:0] icmp_ln48_reg_836_pp2_iter1_reg;
wire   [9:0] add_ln48_fu_413_p2;
reg   [9:0] add_ln48_reg_840;
reg    ap_enable_reg_pp2_iter0;
wire   [6:0] select_ln51_fu_431_p3;
reg   [6:0] select_ln51_reg_845;
wire   [3:0] select_ln51_1_fu_439_p3;
reg   [3:0] select_ln51_1_reg_851;
reg   [3:0] y_V_addr_1_reg_862;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter1_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter2_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter3_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter4_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter5_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter6_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter7_reg;
reg   [3:0] y_V_addr_1_reg_862_pp2_iter8_reg;
wire   [6:0] im_fu_458_p2;
reg   [6:0] im_reg_868;
wire   [0:0] icmp_ln49_1_fu_464_p2;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter1_reg;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter3_reg;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter4_reg;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter5_reg;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter6_reg;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter7_reg;
reg   [0:0] icmp_ln49_1_reg_873_pp2_iter8_reg;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state12_pp2_stage1_iter0;
wire    ap_block_state14_pp2_stage1_iter1;
wire    ap_block_state16_pp2_stage1_iter2;
wire    ap_block_state18_pp2_stage1_iter3;
wire    ap_block_state20_pp2_stage1_iter4;
wire    ap_block_state22_pp2_stage1_iter5;
wire    ap_block_state24_pp2_stage1_iter6;
wire    ap_block_state26_pp2_stage1_iter7;
wire    ap_block_state28_pp2_stage1_iter8;
wire    ap_block_pp2_stage1_11001;
reg  signed [7:0] x_V_load_reg_887;
wire  signed [31:0] sext_ln1428_fu_508_p1;
reg  signed [7:0] fc_weights2_V_load_reg_897;
wire  signed [31:0] grp_fu_784_p3;
reg  signed [31:0] add_ln68_reg_902;
reg    ap_enable_reg_pp2_iter1;
reg   [31:0] tmp_290_reg_907;
reg    ap_enable_reg_pp2_iter4;
reg   [31:0] i_op_assign_4_reg_912;
reg    ap_enable_reg_pp2_iter5;
wire   [31:0] grp_fu_345_p2;
reg   [31:0] val_assign_reg_917;
wire   [31:0] reg_V_fu_519_p1;
reg   [31:0] reg_V_reg_922;
reg   [0:0] p_Result_62_reg_927;
wire   [23:0] tmp_89_fu_552_p3;
reg   [23:0] tmp_89_reg_932;
wire   [0:0] icmp_ln278_fu_560_p2;
reg   [0:0] icmp_ln278_reg_937;
wire   [0:0] icmp_ln285_fu_588_p2;
reg   [0:0] icmp_ln285_reg_942;
wire  signed [8:0] sh_amt_11_fu_594_p2;
reg  signed [8:0] sh_amt_11_reg_947;
wire   [0:0] and_ln284_fu_654_p2;
reg   [0:0] and_ln284_reg_952;
wire   [23:0] select_ln285_fu_666_p3;
reg   [23:0] select_ln285_reg_957;
wire   [0:0] and_ln295_fu_686_p2;
reg   [0:0] and_ln295_reg_962;
wire   [31:0] select_ln303_fu_760_p3;
reg   [31:0] select_ln303_reg_967;
wire   [0:0] icmp_ln56_fu_767_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln56_reg_972_pp3_iter1_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter2_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter3_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter4_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter6_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter7_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter8_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter9_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter10_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter11_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter12_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter13_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter14_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter15_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter16_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter17_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter18_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter19_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter20_reg;
reg   [0:0] icmp_ln56_reg_972_pp3_iter21_reg;
wire   [3:0] om_8_fu_773_p2;
reg    ap_enable_reg_pp3_iter0;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] grp_fu_359_p2;
reg   [31:0] outprepare_reg_991;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire    ap_CS_fsm_state10;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
wire    ap_CS_fsm_state30;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state31;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
reg    ap_enable_reg_pp3_iter13;
reg    ap_enable_reg_pp3_iter14;
reg    ap_enable_reg_pp3_iter15;
reg    ap_enable_reg_pp3_iter16;
reg    ap_enable_reg_pp3_iter17;
reg    ap_enable_reg_pp3_iter18;
reg    ap_enable_reg_pp3_iter19;
reg    ap_enable_reg_pp3_iter20;
reg    ap_enable_reg_pp3_iter21;
reg    ap_enable_reg_pp3_iter22;
reg   [6:0] ap_phi_mux_i_0_phi_fu_282_p4;
reg   [3:0] om_0_reg_290;
wire   [0:0] icmp_ln43_fu_390_p2;
wire    ap_CS_fsm_state8;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_305_p4;
wire    ap_block_pp2_stage0;
reg   [3:0] ap_phi_mux_om1_0_phi_fu_316_p4;
reg   [6:0] ap_phi_mux_im_0_phi_fu_327_p4;
wire   [63:0] zext_ln40_fu_385_p1;
wire   [63:0] zext_ln45_fu_402_p1;
wire   [63:0] zext_ln51_1_fu_453_p1;
wire   [63:0] zext_ln51_fu_447_p1;
wire  signed [63:0] sext_ln215_fu_503_p1;
wire    ap_block_pp2_stage1;
wire   [63:0] zext_ln58_fu_779_p1;
reg    ap_block_pp3_stage0_01001;
reg   [31:0] grp_fu_349_p0;
reg   [31:0] grp_fu_349_p1;
reg  signed [31:0] grp_fu_363_p0;
wire   [0:0] icmp_ln49_fu_425_p2;
wire   [3:0] om_7_fu_419_p2;
wire   [8:0] tmp_95_fu_480_p3;
wire   [10:0] tmp_94_fu_473_p3;
wire   [10:0] zext_ln215_fu_487_p1;
wire   [10:0] sub_ln215_fu_491_p2;
wire   [10:0] zext_ln49_fu_470_p1;
wire   [10:0] add_ln215_fu_497_p2;
wire   [7:0] p_Result_s_fu_534_p4;
wire   [22:0] trunc_ln270_fu_548_p1;
wire   [30:0] trunc_ln262_fu_522_p1;
wire   [8:0] exp_V_fu_544_p1;
wire  signed [8:0] sh_amt_fu_566_p2;
wire   [3:0] tmp_fu_600_p4;
wire  signed [23:0] sext_ln281_fu_572_p1;
wire   [0:0] icmp_ln282_fu_576_p2;
wire   [0:0] xor_ln278_fu_622_p2;
wire   [0:0] and_ln282_fu_628_p2;
wire   [0:0] or_ln282_fu_642_p2;
wire   [0:0] icmp_ln284_fu_582_p2;
wire   [0:0] xor_ln282_fu_648_p2;
wire   [0:0] and_ln285_fu_660_p2;
wire   [23:0] lshr_ln286_fu_616_p2;
wire   [23:0] select_ln282_fu_634_p3;
wire   [0:0] or_ln284_fu_674_p2;
wire   [0:0] icmp_ln295_fu_610_p2;
wire   [0:0] xor_ln284_fu_680_p2;
wire   [0:0] tmp_115_fu_698_p3;
wire   [31:0] zext_ln283_fu_692_p1;
wire  signed [31:0] sext_ln294_fu_695_p1;
wire   [31:0] shl_ln297_fu_713_p2;
wire   [31:0] zext_ln285_fu_719_p1;
wire   [31:0] select_ln295_fu_722_p3;
wire   [0:0] xor_ln285_fu_736_p2;
wire   [0:0] and_ln285_11_fu_741_p2;
wire   [31:0] select_ln288_fu_705_p3;
wire   [31:0] select_ln278_fu_729_p3;
wire   [31:0] select_ln285_11_fu_746_p3;
wire   [31:0] sub_ln461_fu_754_p2;
reg    grp_fu_359_ce;
reg    grp_fu_363_ce;
wire    ap_CS_fsm_state55;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
#0 ap_enable_reg_pp3_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter14 = 1'b0;
#0 ap_enable_reg_pp3_iter15 = 1'b0;
#0 ap_enable_reg_pp3_iter16 = 1'b0;
#0 ap_enable_reg_pp3_iter17 = 1'b0;
#0 ap_enable_reg_pp3_iter18 = 1'b0;
#0 ap_enable_reg_pp3_iter19 = 1'b0;
#0 ap_enable_reg_pp3_iter20 = 1'b0;
#0 ap_enable_reg_pp3_iter21 = 1'b0;
#0 ap_enable_reg_pp3_iter22 = 1'b0;
end

fc_relu6_x_V_3 #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_V_address0),
    .ce0(x_V_ce0),
    .we0(x_V_we0),
    .d0(in_stream_V_V_dout),
    .q0(x_V_q0)
);

fc_64u_12u_1u_s_y_V #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
y_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_V_address0),
    .ce0(y_V_ce0),
    .we0(y_V_we0),
    .d0(32'd0),
    .q0(y_V_q0),
    .address1(y_V_address1),
    .ce1(y_V_ce1),
    .we1(y_V_we1),
    .d1(y_V_d1)
);

kws_fadd_32ns_32nwdI #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fadd_32ns_32nwdI_U364(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_290_reg_907),
    .din1(i_op_assign_4_reg_912),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

kws_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32neOg_U365(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_349_p0),
    .din1(grp_fu_349_p1),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

kws_fmul_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fmul_32ns_32neOg_U366(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_117_reg_793),
    .din1(tmp_scale_fc),
    .ce(1'b1),
    .dout(grp_fu_354_p2)
);

kws_fdiv_32ns_32nGfk #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_fdiv_32ns_32nGfk_U367(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_367),
    .din1(output_scale_reg_809),
    .ce(grp_fu_359_ce),
    .dout(grp_fu_359_p2)
);

kws_sitofp_32s_32OgC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_sitofp_32s_32OgC_U368(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p0),
    .ce(grp_fu_363_ce),
    .dout(grp_fu_363_p1)
);

kws_mac_muladd_8sLf8 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kws_mac_muladd_8sLf8_U369(
    .din0(fc_weights2_V_load_reg_897),
    .din1(x_V_load_reg_887),
    .din2(y_V_q0),
    .dout(grp_fu_784_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state31)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter23 <= ap_enable_reg_pp3_iter22;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp3_iter23 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_819 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_278 <= i_reg_823;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_278 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        im_0_reg_323 <= 7'd0;
    end else if (((icmp_ln48_reg_836 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        im_0_reg_323 <= im_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_reg_301 <= 10'd0;
    end else if (((icmp_ln48_reg_836 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_301 <= add_ln48_reg_840;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        om1_0_reg_312 <= 4'd0;
    end else if (((icmp_ln48_reg_836 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        om1_0_reg_312 <= select_ln51_1_reg_851;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        om2_0_reg_334 <= 4'd0;
    end else if (((icmp_ln56_fu_767_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        om2_0_reg_334 <= om_8_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        om_0_reg_290 <= 4'd0;
    end else if (((icmp_ln43_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        om_0_reg_290 <= om_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln48_reg_840 <= add_ln48_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_836_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln68_reg_902 <= grp_fu_784_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_1_reg_873_pp2_iter7_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        and_ln284_reg_952 <= and_ln284_fu_654_p2;
        and_ln295_reg_962 <= and_ln295_fu_686_p2;
        icmp_ln278_reg_937 <= icmp_ln278_fu_560_p2;
        icmp_ln285_reg_942 <= icmp_ln285_fu_588_p2;
        p_Result_62_reg_927 <= reg_V_fu_519_p1[32'd31];
        reg_V_reg_922 <= reg_V_fu_519_p1;
        select_ln285_reg_957 <= select_ln285_fu_666_p3;
        sh_amt_11_reg_947 <= sh_amt_11_fu_594_p2;
        tmp_89_reg_932[22 : 0] <= tmp_89_fu_552_p3[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_836 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        fc_weights2_V_load_reg_897 <= fc_weights2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_1_reg_873_pp2_iter4_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_op_assign_4_reg_912 <= grp_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_823 <= i_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln37_reg_819 <= icmp_ln37_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln48_reg_836 <= icmp_ln48_fu_407_p2;
        icmp_ln48_reg_836_pp2_iter1_reg <= icmp_ln48_reg_836;
        icmp_ln49_1_reg_873_pp2_iter1_reg <= icmp_ln49_1_reg_873;
        icmp_ln49_1_reg_873_pp2_iter2_reg <= icmp_ln49_1_reg_873_pp2_iter1_reg;
        icmp_ln49_1_reg_873_pp2_iter3_reg <= icmp_ln49_1_reg_873_pp2_iter2_reg;
        icmp_ln49_1_reg_873_pp2_iter4_reg <= icmp_ln49_1_reg_873_pp2_iter3_reg;
        icmp_ln49_1_reg_873_pp2_iter5_reg <= icmp_ln49_1_reg_873_pp2_iter4_reg;
        icmp_ln49_1_reg_873_pp2_iter6_reg <= icmp_ln49_1_reg_873_pp2_iter5_reg;
        icmp_ln49_1_reg_873_pp2_iter7_reg <= icmp_ln49_1_reg_873_pp2_iter6_reg;
        icmp_ln49_1_reg_873_pp2_iter8_reg <= icmp_ln49_1_reg_873_pp2_iter7_reg;
        y_V_addr_1_reg_862_pp2_iter1_reg <= y_V_addr_1_reg_862;
        y_V_addr_1_reg_862_pp2_iter2_reg <= y_V_addr_1_reg_862_pp2_iter1_reg;
        y_V_addr_1_reg_862_pp2_iter3_reg <= y_V_addr_1_reg_862_pp2_iter2_reg;
        y_V_addr_1_reg_862_pp2_iter4_reg <= y_V_addr_1_reg_862_pp2_iter3_reg;
        y_V_addr_1_reg_862_pp2_iter5_reg <= y_V_addr_1_reg_862_pp2_iter4_reg;
        y_V_addr_1_reg_862_pp2_iter6_reg <= y_V_addr_1_reg_862_pp2_iter5_reg;
        y_V_addr_1_reg_862_pp2_iter7_reg <= y_V_addr_1_reg_862_pp2_iter6_reg;
        y_V_addr_1_reg_862_pp2_iter8_reg <= y_V_addr_1_reg_862_pp2_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_407_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln49_1_reg_873 <= icmp_ln49_1_fu_464_p2;
        select_ln51_reg_845 <= select_ln51_fu_431_p3;
        y_V_addr_1_reg_862 <= zext_ln51_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln56_reg_972 <= icmp_ln56_fu_767_p2;
        icmp_ln56_reg_972_pp3_iter1_reg <= icmp_ln56_reg_972;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln56_reg_972_pp3_iter10_reg <= icmp_ln56_reg_972_pp3_iter9_reg;
        icmp_ln56_reg_972_pp3_iter11_reg <= icmp_ln56_reg_972_pp3_iter10_reg;
        icmp_ln56_reg_972_pp3_iter12_reg <= icmp_ln56_reg_972_pp3_iter11_reg;
        icmp_ln56_reg_972_pp3_iter13_reg <= icmp_ln56_reg_972_pp3_iter12_reg;
        icmp_ln56_reg_972_pp3_iter14_reg <= icmp_ln56_reg_972_pp3_iter13_reg;
        icmp_ln56_reg_972_pp3_iter15_reg <= icmp_ln56_reg_972_pp3_iter14_reg;
        icmp_ln56_reg_972_pp3_iter16_reg <= icmp_ln56_reg_972_pp3_iter15_reg;
        icmp_ln56_reg_972_pp3_iter17_reg <= icmp_ln56_reg_972_pp3_iter16_reg;
        icmp_ln56_reg_972_pp3_iter18_reg <= icmp_ln56_reg_972_pp3_iter17_reg;
        icmp_ln56_reg_972_pp3_iter19_reg <= icmp_ln56_reg_972_pp3_iter18_reg;
        icmp_ln56_reg_972_pp3_iter20_reg <= icmp_ln56_reg_972_pp3_iter19_reg;
        icmp_ln56_reg_972_pp3_iter21_reg <= icmp_ln56_reg_972_pp3_iter20_reg;
        icmp_ln56_reg_972_pp3_iter22_reg <= icmp_ln56_reg_972_pp3_iter21_reg;
        icmp_ln56_reg_972_pp3_iter2_reg <= icmp_ln56_reg_972_pp3_iter1_reg;
        icmp_ln56_reg_972_pp3_iter3_reg <= icmp_ln56_reg_972_pp3_iter2_reg;
        icmp_ln56_reg_972_pp3_iter4_reg <= icmp_ln56_reg_972_pp3_iter3_reg;
        icmp_ln56_reg_972_pp3_iter5_reg <= icmp_ln56_reg_972_pp3_iter4_reg;
        icmp_ln56_reg_972_pp3_iter6_reg <= icmp_ln56_reg_972_pp3_iter5_reg;
        icmp_ln56_reg_972_pp3_iter7_reg <= icmp_ln56_reg_972_pp3_iter6_reg;
        icmp_ln56_reg_972_pp3_iter8_reg <= icmp_ln56_reg_972_pp3_iter7_reg;
        icmp_ln56_reg_972_pp3_iter9_reg <= icmp_ln56_reg_972_pp3_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_407_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        im_reg_868 <= im_fu_458_p2;
        select_ln51_1_reg_851 <= select_ln51_1_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_972_pp3_iter21_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        outprepare_reg_991 <= grp_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_scale_reg_809 <= grp_fu_349_p2;
        tmp_scale_1_reg_814 <= grp_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln56_reg_972_pp3_iter5_reg == 1'd0) & (ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_1_reg_873_pp2_iter2_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_367 <= grp_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln49_1_reg_873_pp2_iter8_reg == 1'd1))) begin
        select_ln303_reg_967 <= select_ln303_fu_760_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fc2final_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_117_reg_793 <= fc2final_scale_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln49_1_reg_873_pp2_iter4_reg == 1'd1))) begin
        tmp_290_reg_907 <= grp_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln49_1_reg_873_pp2_iter7_reg == 1'd1))) begin
        val_assign_reg_917 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_reg_836 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        x_V_load_reg_887 <= x_V_q0;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_373_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_407_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_767_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter22 == 1'b0) & (ap_enable_reg_pp3_iter21 == 1'b0) & (ap_enable_reg_pp3_iter20 == 1'b0) & (ap_enable_reg_pp3_iter19 == 1'b0) & (ap_enable_reg_pp3_iter18 == 1'b0) & (ap_enable_reg_pp3_iter17 == 1'b0) & (ap_enable_reg_pp3_iter16 == 1'b0) & (ap_enable_reg_pp3_iter15 == 1'b0) & (ap_enable_reg_pp3_iter14 == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b0) & (ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter23 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_819 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_282_p4 = i_reg_823;
    end else begin
        ap_phi_mux_i_0_phi_fu_282_p4 = i_0_reg_278;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_836 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_im_0_phi_fu_327_p4 = im_reg_868;
    end else begin
        ap_phi_mux_im_0_phi_fu_327_p4 = im_0_reg_323;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_836 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_305_p4 = add_ln48_reg_840;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_305_p4 = indvar_flatten_reg_301;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_836 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_om1_0_phi_fu_316_p4 = select_ln51_1_reg_851;
    end else begin
        ap_phi_mux_om1_0_phi_fu_316_p4 = om1_0_reg_312;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        fc2final_scale_V_blk_n = fc2final_scale_V_empty_n;
    end else begin
        fc2final_scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fc2final_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        fc2final_scale_V_read = 1'b1;
    end else begin
        fc2final_scale_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        fc_bias2_V_ce0 = 1'b1;
    end else begin
        fc_bias2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        fc_weights2_V_ce0 = 1'b1;
    end else begin
        fc_weights2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        grp_fu_349_p0 = reg_367;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_349_p0 = tmp_117_reg_793;
    end else begin
        grp_fu_349_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        grp_fu_349_p1 = tmp_scale_1_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_349_p1 = fc_weight2_scale;
    end else begin
        grp_fu_349_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        grp_fu_359_ce = 1'b1;
    end else begin
        grp_fu_359_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        grp_fu_363_ce = 1'b1;
    end else begin
        grp_fu_363_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_363_p0 = y_V_q0;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_363_p0 = add_ln68_reg_902;
    end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        grp_fu_363_p0 = sext_ln1428_fu_508_p1;
    end else begin
        grp_fu_363_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_819 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_V_blk_n = in_stream_V_V_empty_n;
    end else begin
        in_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_819 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_V_read = 1'b1;
    end else begin
        in_stream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_reg_972_pp3_iter22_reg == 1'd0) & (ap_enable_reg_pp3_iter23 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln56_reg_972_pp3_iter22_reg == 1'd0) & (ap_enable_reg_pp3_iter23 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_V_address0 = zext_ln51_1_fu_453_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_address0 = zext_ln40_fu_385_p1;
    end else begin
        x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_V_ce0 = 1'b1;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_819 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_V_we0 = 1'b1;
    end else begin
        x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        y_V_address0 = zext_ln58_fu_779_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_V_address0 = y_V_addr_1_reg_862;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_V_address0 = zext_ln45_fu_402_p1;
    end else begin
        y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_V_address1 = y_V_addr_1_reg_862_pp2_iter8_reg;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        y_V_address1 = y_V_addr_1_reg_862_pp2_iter1_reg;
    end else begin
        y_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_V_ce0 = 1'b1;
    end else begin
        y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_V_ce1 = 1'b1;
    end else begin
        y_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_V_d1 = select_ln303_reg_967;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        y_V_d1 = grp_fu_784_p3;
    end else begin
        y_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        y_V_we0 = 1'b1;
    end else begin
        y_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln48_reg_836_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln49_1_reg_873_pp2_iter8_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        y_V_we1 = 1'b1;
    end else begin
        y_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((fc2final_scale_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_373_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_373_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln43_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln48_fu_407_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter8 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln48_fu_407_p2 == 1'd1)) | ((ap_enable_reg_pp2_iter8 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln56_fu_767_p2 == 1'd1)) & ~((ap_enable_reg_pp3_iter22 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter23 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln56_fu_767_p2 == 1'd1)) | ((ap_enable_reg_pp3_iter22 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter23 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln215_fu_497_p2 = (sub_ln215_fu_491_p2 + zext_ln49_fu_470_p1);

assign add_ln48_fu_413_p2 = (ap_phi_mux_indvar_flatten_phi_fu_305_p4 + 10'd1);

assign and_ln282_fu_628_p2 = (xor_ln278_fu_622_p2 & icmp_ln282_fu_576_p2);

assign and_ln284_fu_654_p2 = (xor_ln282_fu_648_p2 & icmp_ln284_fu_582_p2);

assign and_ln285_11_fu_741_p2 = (xor_ln285_fu_736_p2 & and_ln284_reg_952);

assign and_ln285_fu_660_p2 = (icmp_ln285_fu_588_p2 & and_ln284_fu_654_p2);

assign and_ln295_fu_686_p2 = (xor_ln284_fu_680_p2 & icmp_ln295_fu_610_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln37_reg_819 == 1'd0) & (in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln37_reg_819 == 1'd0) & (in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((icmp_ln56_reg_972_pp3_iter22_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter23 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((icmp_ln56_reg_972_pp3_iter22_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter23 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((icmp_ln56_reg_972_pp3_iter22_reg == 1'd0) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter23 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((fc2final_scale_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp3_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp3_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp3_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp3_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp3_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_pp3_stage0_iter23 = ((icmp_ln56_reg_972_pp3_iter22_reg == 1'd0) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((icmp_ln37_reg_819 == 1'd0) & (in_stream_V_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign exp_V_fu_544_p1 = p_Result_s_fu_534_p4;

assign fc_bias2_V_address0 = zext_ln51_fu_447_p1;

assign fc_weights2_V_address0 = sext_ln215_fu_503_p1;

assign i_fu_379_p2 = (ap_phi_mux_i_0_phi_fu_282_p4 + 7'd1);

assign icmp_ln278_fu_560_p2 = ((trunc_ln262_fu_522_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_576_p2 = ((p_Result_s_fu_534_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_582_p2 = (($signed(sh_amt_fu_566_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_588_p2 = (($signed(sh_amt_fu_566_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_610_p2 = (($signed(tmp_fu_600_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_373_p2 = ((ap_phi_mux_i_0_phi_fu_282_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_390_p2 = ((om_0_reg_290 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_407_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_305_p4 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_464_p2 = ((im_fu_458_p2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_425_p2 = ((ap_phi_mux_im_0_phi_fu_327_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_767_p2 = ((om2_0_reg_334 == 4'd12) ? 1'b1 : 1'b0);

assign im_fu_458_p2 = (select_ln51_fu_431_p3 + 7'd1);

assign lshr_ln286_fu_616_p2 = tmp_89_fu_552_p3 >> sext_ln281_fu_572_p1;

assign om_7_fu_419_p2 = (ap_phi_mux_om1_0_phi_fu_316_p4 + 4'd1);

assign om_8_fu_773_p2 = (om2_0_reg_334 + 4'd1);

assign om_fu_396_p2 = (om_0_reg_290 + 4'd1);

assign or_ln282_fu_642_p2 = (icmp_ln282_fu_576_p2 | icmp_ln278_fu_560_p2);

assign or_ln284_fu_674_p2 = (or_ln282_fu_642_p2 | icmp_ln284_fu_582_p2);

assign out_stream_V_din = outprepare_reg_991;

assign p_Result_s_fu_534_p4 = {{reg_V_fu_519_p1[30:23]}};

assign reg_V_fu_519_p1 = val_assign_reg_917;

assign select_ln278_fu_729_p3 = ((icmp_ln278_reg_937[0:0] === 1'b1) ? 32'd0 : select_ln295_fu_722_p3);

assign select_ln282_fu_634_p3 = ((and_ln282_fu_628_p2[0:0] === 1'b1) ? tmp_89_fu_552_p3 : 24'd0);

assign select_ln285_11_fu_746_p3 = ((and_ln285_11_fu_741_p2[0:0] === 1'b1) ? select_ln288_fu_705_p3 : select_ln278_fu_729_p3);

assign select_ln285_fu_666_p3 = ((and_ln285_fu_660_p2[0:0] === 1'b1) ? lshr_ln286_fu_616_p2 : select_ln282_fu_634_p3);

assign select_ln288_fu_705_p3 = ((tmp_115_fu_698_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln295_fu_722_p3 = ((and_ln295_reg_962[0:0] === 1'b1) ? shl_ln297_fu_713_p2 : zext_ln285_fu_719_p1);

assign select_ln303_fu_760_p3 = ((p_Result_62_reg_927[0:0] === 1'b1) ? sub_ln461_fu_754_p2 : select_ln285_11_fu_746_p3);

assign select_ln51_1_fu_439_p3 = ((icmp_ln49_fu_425_p2[0:0] === 1'b1) ? om_7_fu_419_p2 : ap_phi_mux_om1_0_phi_fu_316_p4);

assign select_ln51_fu_431_p3 = ((icmp_ln49_fu_425_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_im_0_phi_fu_327_p4);

assign sext_ln1428_fu_508_p1 = $signed(fc_bias2_V_q0);

assign sext_ln215_fu_503_p1 = $signed(add_ln215_fu_497_p2);

assign sext_ln281_fu_572_p1 = sh_amt_fu_566_p2;

assign sext_ln294_fu_695_p1 = sh_amt_11_reg_947;

assign sh_amt_11_fu_594_p2 = ($signed(9'd0) - $signed(sh_amt_fu_566_p2));

assign sh_amt_fu_566_p2 = (9'd150 - exp_V_fu_544_p1);

assign shl_ln297_fu_713_p2 = zext_ln283_fu_692_p1 << sext_ln294_fu_695_p1;

assign sub_ln215_fu_491_p2 = (tmp_94_fu_473_p3 - zext_ln215_fu_487_p1);

assign sub_ln461_fu_754_p2 = (32'd0 - select_ln285_11_fu_746_p3);

assign tmp_115_fu_698_p3 = reg_V_reg_922[32'd31];

assign tmp_89_fu_552_p3 = {{1'd1}, {trunc_ln270_fu_548_p1}};

assign tmp_94_fu_473_p3 = {{select_ln51_reg_845}, {4'd0}};

assign tmp_95_fu_480_p3 = {{select_ln51_reg_845}, {2'd0}};

assign tmp_fu_600_p4 = {{sh_amt_11_fu_594_p2[8:5]}};

assign trunc_ln262_fu_522_p1 = reg_V_fu_519_p1[30:0];

assign trunc_ln270_fu_548_p1 = reg_V_fu_519_p1[22:0];

assign xor_ln278_fu_622_p2 = (icmp_ln278_fu_560_p2 ^ 1'd1);

assign xor_ln282_fu_648_p2 = (or_ln282_fu_642_p2 ^ 1'd1);

assign xor_ln284_fu_680_p2 = (or_ln284_fu_674_p2 ^ 1'd1);

assign xor_ln285_fu_736_p2 = (icmp_ln285_reg_942 ^ 1'd1);

assign zext_ln215_fu_487_p1 = tmp_95_fu_480_p3;

assign zext_ln283_fu_692_p1 = tmp_89_reg_932;

assign zext_ln285_fu_719_p1 = select_ln285_reg_957;

assign zext_ln40_fu_385_p1 = i_0_reg_278;

assign zext_ln45_fu_402_p1 = om_0_reg_290;

assign zext_ln49_fu_470_p1 = select_ln51_1_reg_851;

assign zext_ln51_1_fu_453_p1 = select_ln51_fu_431_p3;

assign zext_ln51_fu_447_p1 = select_ln51_1_fu_439_p3;

assign zext_ln58_fu_779_p1 = om2_0_reg_334;

always @ (posedge ap_clk) begin
    tmp_89_reg_932[23] <= 1'b1;
end

endmodule //fc_64u_12u_1u_s
