// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BDCT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_in_out_address0,
        image_in_out_ce0,
        image_in_out_we0,
        image_in_out_d0,
        image_in_out_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] image_in_out_address0;
output   image_in_out_ce0;
output   image_in_out_we0;
output  [31:0] image_in_out_d0;
input  [31:0] image_in_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] image_in_out_address0;
reg image_in_out_ce0;
reg image_in_out_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] BDCT_temp_address0;
reg    BDCT_temp_ce0;
reg    BDCT_temp_we0;
wire   [31:0] BDCT_temp_q0;
reg   [5:0] BDCT_out_address0;
reg    BDCT_out_ce0;
reg    BDCT_out_we0;
reg   [31:0] BDCT_out_d0;
wire   [31:0] BDCT_out_q0;
wire   [4:0] i_fu_220_p2;
reg   [4:0] i_reg_473;
wire    ap_CS_fsm_state2;
wire   [6:0] shl_ln_fu_230_p3;
reg   [6:0] shl_ln_reg_478;
wire   [0:0] icmp_ln382_fu_214_p2;
wire   [4:0] j_fu_244_p2;
reg   [4:0] j_reg_487;
wire    ap_CS_fsm_state3;
wire   [6:0] shl_ln390_1_fu_254_p3;
reg   [6:0] shl_ln390_1_reg_492;
wire   [0:0] icmp_ln384_fu_238_p2;
wire   [3:0] u_fu_272_p2;
reg   [3:0] u_reg_501;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln390_fu_278_p2;
reg   [6:0] add_ln390_reg_506;
wire   [0:0] icmp_ln386_fu_266_p2;
wire   [7:0] zext_ln388_1_fu_291_p1;
reg   [7:0] zext_ln388_1_reg_511;
wire   [3:0] v_fu_305_p2;
reg   [3:0] v_reg_519;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln388_fu_299_p2;
wire   [7:0] add_ln390_2_fu_332_p2;
reg   [7:0] add_ln390_2_reg_529;
wire   [3:0] u_4_fu_347_p2;
reg   [3:0] u_4_reg_537;
wire    ap_CS_fsm_state7;
wire   [7:0] zext_ln396_fu_361_p1;
reg   [7:0] zext_ln396_reg_542;
wire   [0:0] icmp_ln394_fu_341_p2;
wire   [3:0] v_6_fu_371_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] u_5_fu_401_p2;
reg   [3:0] u_5_reg_558;
wire    ap_CS_fsm_state10;
wire   [7:0] zext_ln408_fu_415_p1;
reg   [7:0] zext_ln408_reg_563;
wire   [0:0] icmp_ln404_fu_395_p2;
wire   [6:0] add_ln408_fu_419_p2;
reg   [6:0] add_ln408_reg_568;
wire   [3:0] v_7_fu_434_p2;
reg   [3:0] v_7_reg_576;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln406_fu_428_p2;
wire   [6:0] add_ln408_1_fu_454_p2;
reg   [6:0] add_ln408_1_reg_586;
wire    grp_DCT_fu_194_ap_start;
wire    grp_DCT_fu_194_ap_done;
wire    grp_DCT_fu_194_ap_idle;
wire    grp_DCT_fu_194_ap_ready;
wire   [5:0] grp_DCT_fu_194_ori_address0;
wire    grp_DCT_fu_194_ori_ce0;
wire   [5:0] grp_DCT_fu_194_dct_r_address0;
wire    grp_DCT_fu_194_dct_r_ce0;
wire    grp_DCT_fu_194_dct_r_we0;
wire   [31:0] grp_DCT_fu_194_dct_r_d0;
reg   [4:0] i_0_reg_106;
reg   [4:0] j_0_reg_117;
reg   [3:0] u_0_reg_128;
reg   [3:0] v_0_reg_139;
wire    ap_CS_fsm_state6;
reg   [3:0] u1_0_reg_150;
wire   [0:0] icmp_ln396_fu_365_p2;
reg   [3:0] v2_0_reg_161;
reg   [3:0] u3_0_reg_172;
wire    ap_CS_fsm_state9;
reg   [3:0] v4_0_reg_183;
wire    ap_CS_fsm_state12;
reg    grp_DCT_fu_194_ap_start_reg;
wire   [63:0] zext_ln390_fu_323_p1;
wire   [63:0] zext_ln390_2_fu_337_p1;
wire   [63:0] zext_ln398_1_fu_386_p1;
wire   [63:0] zext_ln408_3_fu_449_p1;
wire   [63:0] zext_ln408_2_fu_465_p1;
wire   [3:0] trunc_ln390_fu_226_p1;
wire   [3:0] trunc_ln390_1_fu_250_p1;
wire   [6:0] zext_ln386_fu_262_p1;
wire   [6:0] tmp_s_fu_283_p3;
wire   [6:0] zext_ln388_fu_295_p1;
wire   [6:0] add_ln390_1_fu_311_p2;
wire   [13:0] tmp_82_fu_316_p3;
wire   [7:0] zext_ln390_1_fu_328_p1;
wire   [6:0] tmp_81_fu_353_p3;
wire   [7:0] zext_ln398_fu_377_p1;
wire   [7:0] add_ln398_fu_381_p2;
wire   [6:0] tmp_83_fu_407_p3;
wire   [6:0] zext_ln404_fu_391_p1;
wire   [7:0] zext_ln408_1_fu_440_p1;
wire   [7:0] add_ln408_2_fu_444_p2;
wire   [6:0] zext_ln406_fu_424_p1;
wire   [13:0] tmp_84_fu_459_p3;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_DCT_fu_194_ap_start_reg = 1'b0;
end

BDCT_BDCT_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
BDCT_temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BDCT_temp_address0),
    .ce0(BDCT_temp_ce0),
    .we0(BDCT_temp_we0),
    .d0(image_in_out_q0),
    .q0(BDCT_temp_q0)
);

BDCT_BDCT_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
BDCT_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BDCT_out_address0),
    .ce0(BDCT_out_ce0),
    .we0(BDCT_out_we0),
    .d0(BDCT_out_d0),
    .q0(BDCT_out_q0)
);

DCT grp_DCT_fu_194(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_DCT_fu_194_ap_start),
    .ap_done(grp_DCT_fu_194_ap_done),
    .ap_idle(grp_DCT_fu_194_ap_idle),
    .ap_ready(grp_DCT_fu_194_ap_ready),
    .ori_address0(grp_DCT_fu_194_ori_address0),
    .ori_ce0(grp_DCT_fu_194_ori_ce0),
    .ori_q0(BDCT_temp_q0),
    .dct_r_address0(grp_DCT_fu_194_dct_r_address0),
    .dct_r_ce0(grp_DCT_fu_194_dct_r_ce0),
    .dct_r_we0(grp_DCT_fu_194_dct_r_we0),
    .dct_r_d0(grp_DCT_fu_194_dct_r_d0),
    .dct_r_q0(BDCT_out_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_DCT_fu_194_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln394_fu_341_p2 == 1'd1))) begin
            grp_DCT_fu_194_ap_start_reg <= 1'b1;
        end else if ((grp_DCT_fu_194_ap_ready == 1'b1)) begin
            grp_DCT_fu_194_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln384_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_106 <= i_reg_473;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_106 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln404_fu_395_p2 == 1'd1))) begin
        j_0_reg_117 <= j_reg_487;
    end else if (((icmp_ln382_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_117 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln386_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        u1_0_reg_150 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln396_fu_365_p2 == 1'd1))) begin
        u1_0_reg_150 <= u_4_reg_537;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln406_fu_428_p2 == 1'd1))) begin
        u3_0_reg_172 <= u_5_reg_558;
    end else if (((1'b1 == ap_CS_fsm_state9) & (grp_DCT_fu_194_ap_done == 1'b1))) begin
        u3_0_reg_172 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_299_p2 == 1'd1))) begin
        u_0_reg_128 <= u_reg_501;
    end else if (((icmp_ln384_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        u_0_reg_128 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln394_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        v2_0_reg_161 <= 4'd0;
    end else if (((icmp_ln396_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        v2_0_reg_161 <= v_6_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln404_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        v4_0_reg_183 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        v4_0_reg_183 <= v_7_reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln386_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        v_0_reg_139 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v_0_reg_139 <= v_reg_519;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln388_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln390_2_reg_529 <= add_ln390_2_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln386_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln390_reg_506 <= add_ln390_fu_278_p2;
        zext_ln388_1_reg_511[6 : 3] <= zext_ln388_1_fu_291_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln406_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln408_1_reg_586 <= add_ln408_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln404_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln408_reg_568 <= add_ln408_fu_419_p2;
        zext_ln408_reg_563[6 : 3] <= zext_ln408_fu_415_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_473 <= i_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_487 <= j_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln384_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln390_1_reg_492[6 : 3] <= shl_ln390_1_fu_254_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln382_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_478[6 : 3] <= shl_ln_fu_230_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        u_4_reg_537 <= u_4_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        u_5_reg_558 <= u_5_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        u_reg_501 <= u_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v_7_reg_576 <= v_7_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_reg_519 <= v_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln394_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln396_reg_542[6 : 3] <= zext_ln396_fu_361_p1[6 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        BDCT_out_address0 = zext_ln408_3_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        BDCT_out_address0 = zext_ln398_1_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        BDCT_out_address0 = grp_DCT_fu_194_dct_r_address0;
    end else begin
        BDCT_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        BDCT_out_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        BDCT_out_ce0 = grp_DCT_fu_194_dct_r_ce0;
    end else begin
        BDCT_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        BDCT_out_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        BDCT_out_d0 = grp_DCT_fu_194_dct_r_d0;
    end else begin
        BDCT_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln396_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        BDCT_out_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        BDCT_out_we0 = grp_DCT_fu_194_dct_r_we0;
    end else begin
        BDCT_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        BDCT_temp_address0 = zext_ln390_2_fu_337_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        BDCT_temp_address0 = grp_DCT_fu_194_ori_address0;
    end else begin
        BDCT_temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        BDCT_temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        BDCT_temp_ce0 = grp_DCT_fu_194_ori_ce0;
    end else begin
        BDCT_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        BDCT_temp_we0 = 1'b1;
    end else begin
        BDCT_temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln382_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln382_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        image_in_out_address0 = zext_ln408_2_fu_465_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image_in_out_address0 = zext_ln390_fu_323_p1;
    end else begin
        image_in_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        image_in_out_ce0 = 1'b1;
    end else begin
        image_in_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        image_in_out_we0 = 1'b1;
    end else begin
        image_in_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln382_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln384_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln386_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln388_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln394_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln396_fu_365_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_DCT_fu_194_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln404_fu_395_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln406_fu_428_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln390_1_fu_311_p2 = (zext_ln388_fu_295_p1 + shl_ln390_1_reg_492);

assign add_ln390_2_fu_332_p2 = (zext_ln388_1_reg_511 + zext_ln390_1_fu_328_p1);

assign add_ln390_fu_278_p2 = (shl_ln_reg_478 + zext_ln386_fu_262_p1);

assign add_ln398_fu_381_p2 = (zext_ln396_reg_542 + zext_ln398_fu_377_p1);

assign add_ln408_1_fu_454_p2 = (zext_ln406_fu_424_p1 + shl_ln390_1_reg_492);

assign add_ln408_2_fu_444_p2 = (zext_ln408_reg_563 + zext_ln408_1_fu_440_p1);

assign add_ln408_fu_419_p2 = (shl_ln_reg_478 + zext_ln404_fu_391_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_DCT_fu_194_ap_start = grp_DCT_fu_194_ap_start_reg;

assign i_fu_220_p2 = (i_0_reg_106 + 5'd1);

assign icmp_ln382_fu_214_p2 = ((i_0_reg_106 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln384_fu_238_p2 = ((j_0_reg_117 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln386_fu_266_p2 = ((u_0_reg_128 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_299_p2 = ((v_0_reg_139 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln394_fu_341_p2 = ((u1_0_reg_150 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln396_fu_365_p2 = ((v2_0_reg_161 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln404_fu_395_p2 = ((u3_0_reg_172 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln406_fu_428_p2 = ((v4_0_reg_183 == 4'd8) ? 1'b1 : 1'b0);

assign image_in_out_d0 = BDCT_out_q0;

assign j_fu_244_p2 = (j_0_reg_117 + 5'd1);

assign shl_ln390_1_fu_254_p3 = {{trunc_ln390_1_fu_250_p1}, {3'd0}};

assign shl_ln_fu_230_p3 = {{trunc_ln390_fu_226_p1}, {3'd0}};

assign tmp_81_fu_353_p3 = {{u1_0_reg_150}, {3'd0}};

assign tmp_82_fu_316_p3 = {{add_ln390_reg_506}, {add_ln390_1_fu_311_p2}};

assign tmp_83_fu_407_p3 = {{u3_0_reg_172}, {3'd0}};

assign tmp_84_fu_459_p3 = {{add_ln408_reg_568}, {add_ln408_1_reg_586}};

assign tmp_s_fu_283_p3 = {{u_0_reg_128}, {3'd0}};

assign trunc_ln390_1_fu_250_p1 = j_0_reg_117[3:0];

assign trunc_ln390_fu_226_p1 = i_0_reg_106[3:0];

assign u_4_fu_347_p2 = (u1_0_reg_150 + 4'd1);

assign u_5_fu_401_p2 = (u3_0_reg_172 + 4'd1);

assign u_fu_272_p2 = (u_0_reg_128 + 4'd1);

assign v_6_fu_371_p2 = (v2_0_reg_161 + 4'd1);

assign v_7_fu_434_p2 = (v4_0_reg_183 + 4'd1);

assign v_fu_305_p2 = (v_0_reg_139 + 4'd1);

assign zext_ln386_fu_262_p1 = u_0_reg_128;

assign zext_ln388_1_fu_291_p1 = tmp_s_fu_283_p3;

assign zext_ln388_fu_295_p1 = v_0_reg_139;

assign zext_ln390_1_fu_328_p1 = v_0_reg_139;

assign zext_ln390_2_fu_337_p1 = add_ln390_2_reg_529;

assign zext_ln390_fu_323_p1 = tmp_82_fu_316_p3;

assign zext_ln396_fu_361_p1 = tmp_81_fu_353_p3;

assign zext_ln398_1_fu_386_p1 = add_ln398_fu_381_p2;

assign zext_ln398_fu_377_p1 = v2_0_reg_161;

assign zext_ln404_fu_391_p1 = u3_0_reg_172;

assign zext_ln406_fu_424_p1 = v4_0_reg_183;

assign zext_ln408_1_fu_440_p1 = v4_0_reg_183;

assign zext_ln408_2_fu_465_p1 = tmp_84_fu_459_p3;

assign zext_ln408_3_fu_449_p1 = add_ln408_2_fu_444_p2;

assign zext_ln408_fu_415_p1 = tmp_83_fu_407_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_478[2:0] <= 3'b000;
    shl_ln390_1_reg_492[2:0] <= 3'b000;
    zext_ln388_1_reg_511[2:0] <= 3'b000;
    zext_ln388_1_reg_511[7] <= 1'b0;
    zext_ln396_reg_542[2:0] <= 3'b000;
    zext_ln396_reg_542[7] <= 1'b0;
    zext_ln408_reg_563[2:0] <= 3'b000;
    zext_ln408_reg_563[7] <= 1'b0;
end

endmodule //BDCT
