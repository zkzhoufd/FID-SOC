// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module weight_loader (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_in_TDATA,
        weight_in_TVALID,
        weight_in_TREADY,
        weight_in_TLAST,
        fc1_m_address0,
        fc1_m_ce0,
        fc1_m_we0,
        fc1_m_d0,
        fc1_b_address0,
        fc1_b_ce0,
        fc1_b_we0,
        fc1_b_d0,
        fc2_m_address0,
        fc2_m_ce0,
        fc2_m_we0,
        fc2_m_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state4 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_state7 = 9'd16;
parameter    ap_ST_fsm_pp2_stage0 = 9'd32;
parameter    ap_ST_fsm_state10 = 9'd64;
parameter    ap_ST_fsm_pp3_stage0 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] weight_in_TDATA;
input   weight_in_TVALID;
output   weight_in_TREADY;
input   weight_in_TLAST;
output  [13:0] fc1_m_address0;
output   fc1_m_ce0;
output   fc1_m_we0;
output  [15:0] fc1_m_d0;
output  [5:0] fc1_b_address0;
output   fc1_b_ce0;
output   fc1_b_we0;
output  [15:0] fc1_b_d0;
output  [6:0] fc2_m_address0;
output   fc2_m_ce0;
output   fc2_m_we0;
output  [15:0] fc2_m_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_in_TREADY;
reg fc1_m_ce0;
reg fc1_m_we0;
reg fc1_b_ce0;
reg fc1_b_we0;
reg fc2_m_ce0;
reg fc2_m_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln15_fu_262_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln23_fu_333_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] icmp_ln31_fu_350_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] icmp_ln39_fu_421_p2;
reg   [13:0] indvar_flatten_reg_133;
reg   [7:0] i_0_reg_144;
reg   [6:0] j_0_reg_155;
reg   [6:0] i1_0_reg_166;
reg   [7:0] indvar_flatten6_reg_178;
reg   [6:0] i2_0_reg_189;
reg   [1:0] j3_0_reg_200;
reg   [15:0] fc2_b_0_write_assig_reg_211;
reg   [15:0] fc2_b_1_write_assig_reg_223;
reg   [1:0] i4_0_reg_235;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_state11_pp3_stage0_iter0;
wire    ap_block_state12_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln15_reg_463;
wire   [13:0] add_ln15_fu_268_p2;
wire   [6:0] select_ln19_fu_286_p3;
reg   [6:0] select_ln19_reg_472;
wire   [7:0] select_ln19_1_fu_294_p3;
reg   [7:0] select_ln19_1_reg_477;
wire   [6:0] j_fu_302_p2;
reg   [0:0] icmp_ln23_reg_488;
wire   [6:0] i_fu_339_p2;
reg   [6:0] i_reg_492;
reg   [0:0] icmp_ln31_reg_497;
wire   [7:0] add_ln31_fu_356_p2;
wire   [1:0] select_ln35_fu_374_p3;
reg   [1:0] select_ln35_reg_506;
wire   [6:0] select_ln35_1_fu_382_p3;
reg   [6:0] select_ln35_1_reg_511;
wire   [1:0] j_1_fu_390_p2;
reg   [0:0] icmp_ln39_reg_522;
wire   [1:0] i_5_fu_427_p2;
wire   [0:0] trunc_ln43_fu_433_p1;
reg   [0:0] trunc_ln43_reg_531;
wire   [15:0] select_ln43_fu_437_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [15:0] select_ln43_1_fu_444_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state7;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state10;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state11;
reg   [7:0] ap_phi_mux_i_0_phi_fu_148_p4;
reg   [6:0] ap_phi_mux_i1_0_phi_fu_170_p4;
reg   [6:0] ap_phi_mux_i2_0_phi_fu_193_p4;
wire   [63:0] zext_ln19_1_fu_328_p1;
wire   [63:0] zext_ln27_fu_345_p1;
wire   [63:0] zext_ln35_1_fu_416_p1;
wire   [15:0] grp_fu_246_p1;
wire   [0:0] icmp_ln16_fu_280_p2;
wire   [7:0] i_2_fu_274_p2;
wire   [13:0] tmp_6_fu_308_p3;
wire   [14:0] zext_ln19_fu_319_p1;
wire   [14:0] zext_ln16_fu_315_p1;
wire   [14:0] add_ln19_fu_322_p2;
wire   [0:0] icmp_ln32_fu_368_p2;
wire   [6:0] i_4_fu_362_p2;
wire   [7:0] tmp_8_fu_396_p3;
wire   [8:0] zext_ln35_fu_407_p1;
wire   [8:0] zext_ln32_fu_403_p1;
wire   [8:0] add_ln35_fu_410_p2;
wire    ap_CS_fsm_state13;
reg    grp_fu_246_ce;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

pic_detec_sptohp_Hfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
pic_detec_sptohp_Hfu_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_in_TDATA),
    .ce(grp_fu_246_ce),
    .dout(grp_fu_246_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state8))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state8))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state11))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_166 <= 7'd0;
    end else if (((icmp_ln23_reg_488 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_0_reg_166 <= i_reg_492;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_0_reg_189 <= 7'd0;
    end else if (((icmp_ln31_reg_497 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i2_0_reg_189 <= select_ln35_1_reg_511;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i4_0_reg_235 <= 2'd0;
    end else if (((icmp_ln39_fu_421_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i4_0_reg_235 <= i_5_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_463 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_144 <= select_ln19_1_reg_477;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_144 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten6_reg_178 <= 8'd0;
    end else if (((icmp_ln31_fu_350_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten6_reg_178 <= add_ln31_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_133 <= add_ln15_fu_268_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_133 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j3_0_reg_200 <= 2'd0;
    end else if (((icmp_ln31_fu_350_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j3_0_reg_200 <= j_1_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_155 <= j_fu_302_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_155 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_522 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        fc2_b_0_write_assig_reg_211 <= select_ln43_fu_437_p3;
        fc2_b_1_write_assig_reg_223 <= select_ln43_1_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_reg_492 <= i_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln15_reg_463 <= icmp_ln15_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln23_reg_488 <= icmp_ln23_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln31_reg_497 <= icmp_ln31_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln39_reg_522 <= icmp_ln39_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln19_1_reg_477 <= select_ln19_1_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln19_reg_472 <= select_ln19_fu_286_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_350_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln35_1_reg_511 <= select_ln35_1_fu_382_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln35_reg_506 <= select_ln35_fu_374_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_421_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        trunc_ln43_reg_531 <= trunc_ln43_fu_433_p1;
    end
end

always @ (*) begin
    if ((icmp_ln15_fu_262_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_333_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_350_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_421_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln23_reg_488 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i1_0_phi_fu_170_p4 = i_reg_492;
    end else begin
        ap_phi_mux_i1_0_phi_fu_170_p4 = i1_0_reg_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln31_reg_497 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i2_0_phi_fu_193_p4 = select_ln35_1_reg_511;
    end else begin
        ap_phi_mux_i2_0_phi_fu_193_p4 = i2_0_reg_189;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_463 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_148_p4 = select_ln19_1_reg_477;
    end else begin
        ap_phi_mux_i_0_phi_fu_148_p4 = i_0_reg_144;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        fc1_b_ce0 = 1'b1;
    end else begin
        fc1_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_488 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        fc1_b_we0 = 1'b1;
    end else begin
        fc1_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fc1_m_ce0 = 1'b1;
    end else begin
        fc1_m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_463 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fc1_m_we0 = 1'b1;
    end else begin
        fc1_m_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        fc2_m_ce0 = 1'b1;
    end else begin
        fc2_m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_497 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        fc2_m_we0 = 1'b1;
    end else begin
        fc2_m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        grp_fu_246_ce = 1'b1;
    end else begin
        grp_fu_246_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (icmp_ln31_fu_350_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln23_fu_333_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln15_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln39_fu_421_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        weight_in_TDATA_blk_n = weight_in_TVALID;
    end else begin
        weight_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_350_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln23_fu_333_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln15_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln39_fu_421_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        weight_in_TREADY = 1'b1;
    end else begin
        weight_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln15_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln15_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln23_fu_333_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln23_fu_333_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln31_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln31_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln39_fu_421_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln39_fu_421_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_268_p2 = (indvar_flatten_reg_133 + 14'd1);

assign add_ln19_fu_322_p2 = (zext_ln19_fu_319_p1 + zext_ln16_fu_315_p1);

assign add_ln31_fu_356_p2 = (indvar_flatten6_reg_178 + 8'd1);

assign add_ln35_fu_410_p2 = (zext_ln35_fu_407_p1 + zext_ln32_fu_403_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln15_fu_262_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln15_fu_262_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln23_fu_333_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln23_fu_333_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((icmp_ln31_fu_350_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((icmp_ln31_fu_350_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((icmp_ln39_fu_421_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((icmp_ln39_fu_421_p2 == 1'd0) & (weight_in_TVALID == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state11_pp3_stage0_iter0 = ((icmp_ln39_fu_421_p2 == 1'd0) & (weight_in_TVALID == 1'b0));
end

assign ap_block_state12_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln15_fu_262_p2 == 1'd0) & (weight_in_TVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((icmp_ln23_fu_333_p2 == 1'd0) & (weight_in_TVALID == 1'b0));
end

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp2_stage0_iter0 = ((icmp_ln31_fu_350_p2 == 1'd0) & (weight_in_TVALID == 1'b0));
end

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_return_0 = fc2_b_0_write_assig_reg_211;

assign ap_return_1 = fc2_b_1_write_assig_reg_223;

assign fc1_b_address0 = zext_ln27_fu_345_p1;

assign fc1_b_d0 = grp_fu_246_p1;

assign fc1_m_address0 = zext_ln19_1_fu_328_p1;

assign fc1_m_d0 = grp_fu_246_p1;

assign fc2_m_address0 = zext_ln35_1_fu_416_p1;

assign fc2_m_d0 = grp_fu_246_p1;

assign i_2_fu_274_p2 = (ap_phi_mux_i_0_phi_fu_148_p4 + 8'd1);

assign i_4_fu_362_p2 = (ap_phi_mux_i2_0_phi_fu_193_p4 + 7'd1);

assign i_5_fu_427_p2 = (i4_0_reg_235 + 2'd1);

assign i_fu_339_p2 = (ap_phi_mux_i1_0_phi_fu_170_p4 + 7'd1);

assign icmp_ln15_fu_262_p2 = ((indvar_flatten_reg_133 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_280_p2 = ((j_0_reg_155 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_333_p2 = ((ap_phi_mux_i1_0_phi_fu_170_p4 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_350_p2 = ((indvar_flatten6_reg_178 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_368_p2 = ((j3_0_reg_200 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_421_p2 = ((i4_0_reg_235 == 2'd2) ? 1'b1 : 1'b0);

assign j_1_fu_390_p2 = (select_ln35_fu_374_p3 + 2'd1);

assign j_fu_302_p2 = (select_ln19_fu_286_p3 + 7'd1);

assign select_ln19_1_fu_294_p3 = ((icmp_ln16_fu_280_p2[0:0] === 1'b1) ? i_2_fu_274_p2 : ap_phi_mux_i_0_phi_fu_148_p4);

assign select_ln19_fu_286_p3 = ((icmp_ln16_fu_280_p2[0:0] === 1'b1) ? 7'd0 : j_0_reg_155);

assign select_ln35_1_fu_382_p3 = ((icmp_ln32_fu_368_p2[0:0] === 1'b1) ? i_4_fu_362_p2 : ap_phi_mux_i2_0_phi_fu_193_p4);

assign select_ln35_fu_374_p3 = ((icmp_ln32_fu_368_p2[0:0] === 1'b1) ? 2'd0 : j3_0_reg_200);

assign select_ln43_1_fu_444_p3 = ((trunc_ln43_reg_531[0:0] === 1'b1) ? grp_fu_246_p1 : fc2_b_1_write_assig_reg_223);

assign select_ln43_fu_437_p3 = ((trunc_ln43_reg_531[0:0] === 1'b1) ? fc2_b_0_write_assig_reg_211 : grp_fu_246_p1);

assign tmp_6_fu_308_p3 = {{select_ln19_1_reg_477}, {6'd0}};

assign tmp_8_fu_396_p3 = {{select_ln35_1_reg_511}, {1'd0}};

assign trunc_ln43_fu_433_p1 = i4_0_reg_235[0:0];

assign zext_ln16_fu_315_p1 = tmp_6_fu_308_p3;

assign zext_ln19_1_fu_328_p1 = add_ln19_fu_322_p2;

assign zext_ln19_fu_319_p1 = select_ln19_reg_472;

assign zext_ln27_fu_345_p1 = i1_0_reg_166;

assign zext_ln32_fu_403_p1 = tmp_8_fu_396_p3;

assign zext_ln35_1_fu_416_p1 = add_ln35_fu_410_p2;

assign zext_ln35_fu_407_p1 = select_ln35_reg_506;

endmodule //weight_loader
